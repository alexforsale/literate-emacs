#+options: ':nil *:t -:t ::t <:t H:2 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: alexforsale's literate Emacs configuration
#+date: <2024-03-10 Sun 09:00>
#+author: Kristian Alexander P
#+email: alexforsale@yahoo.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.2 (Org mode 9.6.15)
#+cite_export:
#+startup: indent fold
#+export_file_name: index.html
#+setupfile: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+HTML_HEAD: <style> #content{max-width:1800px;}</style>
#+HTML_HEAD: <style> p{max-width:800px;}</style>
#+HTML_HEAD: <style> li{max-width:800px;}</style

* Literate /Emacs/ Configuration
:PROPERTIES:
:header-args: :tangle ./config.el
:END:
This is the configuration for /Emacs/, written in [[https://orgmode.org/][org-mode]] which allows me to create an actual configuration file (by /[[https://orgmode.org/manual/Extracting-Source-Code.html][tangling]]/ this one =org= file), automatically export it into /HTML/ (and also publish it to my [[https://alexforsale.github.io/literate-emacs/][github page]] using /[[https://github.com/features/actions][github-action]]/), and also makes it easier to maintain.

Since this file in /Emacs/ is considered to be a library, it should follow the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html][convention]]. But this is not needed in the /HTML/ exported file, so every heading with the name =header= or =footer= will be tagged with the =noexport= tag.
** header                                                         :noexport:
#+begin_src emacs-lisp +n
  ;;; config --- Custom Configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
** Modules loading
Every top level heading in this file should be tangled to a separate file, this section will be tangled as ~./config.el~.
#+begin_src emacs-lisp -n
  (require 'config-variables (expand-file-name "modules/config-variables.el" user-emacs-directory) t)
  (require 'config-evil nil t)
  (require 'config-keybindings nil t)
  (require 'config-ui nil t)
  (require 'config-builtin nil t)
  (require 'config-completion nil t)
  (require 'config-shell nil t)
  (require 'config-editing nil t)
  (require 'config-project nil t)
  (require 'config-org nil t)
  (require 'config-tools nil t)
  (require 'config-dired nil t)
  (require 'config-treemacs nil t)
  (require 'config-flycheck nil t)
  (require 'config-mail nil t)
  (require 'config-lisp nil t)
  (require 'config-cc nil t)
  (require 'config-xml nil t)
  (require 'config-yaml nil t)
  (require 'config-toml nil t)
  (require 'config-lua nil t)
  (require 'config-jinja2 nil t)
  (require 'config-json nil t)
  (require 'config-web nil t)
  (require 'config-latex nil t)
  (require 'config-markdown nil t)
  (require 'config-python nil t)
  (require 'config-rust nil t)
  (require 'config-ansible nil t)
  (require 'config-perl nil t)
  (require 'config-haskell nil t)
#+end_src
Since the =load-path= for the modules directory is defined in ~./modules/config-variables.el~, the first =require= line also state the location.
** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config)
  ;;; config.el ends.here
#+end_src

* Early-init file
:PROPERTIES:
:header-args: :tangle ./early-init.el
:END:
Customizations defined in this file (~./early-init.el~) takes effect earlier than the normal init file. Usually before the package systems and GUI is initialized.
** header                                                         :noexport:
#+begin_src emacs-lisp +n
  ;;; early-init --- `Emacs' Initialization file -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src

** Set initial frame
Here I disable the menu-bar, tool-bar and vertical scroll bar.
#+begin_src emacs-lisp -n
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
#+end_src

** Define the location of =custom-file=
The =custom-file= is used to save customization settings for future use.
#+begin_src emacs-lisp -n
  (customize-set-variable 'custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src
* variables and functions
:PROPERTIES:
:header-args: :tangle ./modules/config-variables.el :mkdirp t
:END:
*** header                                                       :noexport:
#+begin_src emacs-lisp +n
  ;;; config-variables --- Custom variables -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =+config/user-modules-directory=
This variable is needed in order for /Emacs/ to locate this configuration files.
#+begin_src emacs-lisp -n
  (defvar +config/user-modules-directory (expand-file-name "modules/" user-emacs-directory)
    "User modules directory.")
#+end_src

#+begin_src emacs-lisp -n
  (when (file-directory-p +config/user-modules-directory)
    (add-to-list 'load-path +config/user-modules-directory))
#+end_src
*** =merge-list-to-list= function
This function is just a wrapper to easily merge lists.
#+begin_src emacs-lisp -n
  ;;; From https://emacs.stackexchange.com/questions/38008/adding-many-items-to-a-list/68048#68048
  (defun merge-list-to-list (dst src)
    "Merges content of the 2nd list with the 1st one"
    (set dst
         (append (eval dst) src)))
#+end_src
*** Setup =package=
Now much more simpler since =[[https://github.com/jwiegley/use-package][use-package]]= is built into /Emacs/.
#+begin_src emacs-lisp -n
  (require 'package)
  ;; Add `melpa` to `package-archives`.
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
  ;; gnu-devel
  (add-to-list 'package-archives '("gnu-devel" . "https://elpa.gnu.org/devel/"))
  (package-initialize)

  ;; gnu-devel
  (add-to-list 'package-archives '("gnu-devel" . "https://elpa.gnu.org/devel/"))

  (custom-set-variables
   '(use-package-enable-imenu-support t)
   '(use-package-always-defer nil)
   '(use-package-verbose t)
   '(use-package-check-before-init t))
#+end_src
*** footer                                                       :noexport:
#+begin_src emacs-lisp -n
  (require 'use-package)
#+end_src
*** footer                                                       :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-variables)
  ;;; config-variables.el ends.here
#+end_src
* Evil
It's not like I hate the standard /Emacs/ keychord, I actually used it for a while, and most of the /shells/ default to /Emacs/ key. But I have to admit, using /vim/ keys allows me to type faster.
:PROPERTIES:
:header-args: :tangle ./modules/config-evil.el :mkdirp t
:END:
** header                                                         :noexport:
#+begin_src emacs-lisp +n
  ;;; config-evil --- `evil-mode' configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
** The main package
Mostly copied from /doom/ or the official documentation[fn:1].
#+begin_src emacs-lisp -n
  (use-package evil
    :ensure t
    :demand t
    :preface
    (customize-set-variable 'evil-want-keybinding nil)
    (customize-set-variable 'evil-want-integration t)
    (customize-set-variable 'evil-undo-system 'undo-redo)
    (customize-set-variable 'evil-want-C-u-scroll t) ;; move universal arg to <leader> u
    (customize-set-variable 'evil-want-C-u-delete t) ;; delete back to indentation in insert state
    (customize-set-variable 'evil-want-C-g-bindings t)
    :custom
    (evil-undo-system #'undo-redo)
    (evil-search-module 'evil-search)
    (evil-ex-search-vim-style-regexp t)
    (evil-ex-interactive-search-highlight 'selected-window)
    (evil-kbd-macro-suppress-motion-error t)
    (evil-visual-update-x-selection-p nil)
    :config
    (setq evil-normal-state-cursor 'box
          evil-insert-state-cursor 'bar
          evil-visual-state-cursor 'hollow)
    (evil-select-search-module 'evil-search-module 'evil-search)
    (evil-mode 1)
    (with-eval-after-load 'eldoc
      (eldoc-add-command 'evil-normal-state
                         'evil-insert
                         'evil-change
                         'evil-delete
                         'evil-replace))
    ;; (evil-set-leader '(normal visual) (kbd "SPC"))
    ;; (evil-set-leader '(normal visual) (kbd "C-c SPC") t)
    ;; set the universal arg
    ;; (evil-define-key '(normal visual) 'global (kbd "<leader>u") 'universal-argument)
    )
#+end_src
** =evil-collection=
For parts of /Emacs/ not covered by Evil[fn:2].
#+begin_src emacs-lisp -n
  (use-package evil-collection
    :ensure t
    :after evil
    :init
    (evil-collection-init)
    :custom
    (evil-collection-setup-minibuffer t)
    (evil-collection-calendar-want-org-bindings t)
    :config
    (with-eval-after-load 'bookmark
      (evil-collection-bookmark-setup))
    (with-eval-after-load 'pass
      (evil-collection-pass-setup))
    (with-eval-after-load 'man
      (evil-collection-man-setup))
    (with-eval-after-load 'org
      (evil-collection-org-setup))
    (with-eval-after-load 'corfu
      (evil-collection-corfu-setup))
    (with-eval-after-load 'embark
      (evil-collection-embark-setup))
    (with-eval-after-load 'epa
      (evil-collection-epa-setup))
    (with-eval-after-load 'nov
      (evil-collection-nov-setup))
    (with-eval-after-load 'eww
      (evil-collection-eww-setup))
    (with-eval-after-load 'emms
      (evil-collection-emms-setup)
      (evil-collection-emms-browser-setup)))
#+end_src
** =evil-terminal-cursor-changer=
Changing the cursor shape in terminal[fn:3].
#+begin_src emacs-lisp -n
  (unless (display-graphic-p)
    (use-package evil-terminal-cursor-changer
      :ensure t
      :config
      (evil-terminal-cursor-changer-activate)))
#+end_src
** =evil-args=
Motions and text objects for delimited arguments in Evil[fn:4].
#+begin_src emacs-lisp -n
  (use-package evil-args
    :after evil
    :ensure t
    :hook (emacs-lisp-mode . +config/evil-args-lisp)
    :config
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)
    (define-key evil-normal-state-map "L" 'evil-forward-arg)
    (define-key evil-normal-state-map "H" 'evil-backward-arg)
    (define-key evil-motion-state-map "L" 'evil-forward-arg)
    (define-key evil-motion-state-map "H" 'evil-backward-arg)
    (define-key evil-normal-state-map "K" 'evil-jump-out-args)
    (defun +config/evil-args-lisp ()
      (setq-local evil-args-delimiters '(" "))))
#+end_src
** =evil-easymotion=
⏩ A port of vim easymotion to Emacs' evil-mode[fn:5].
#+begin_src emacs-lisp -n
  (use-package evil-easymotion
    :after evil
    :ensure t
    :demand t
    :commands evilem-create evilem-default-keybindings
    :config
    (evilem-default-keybindings "gs")
    (evilem-make-motion evilem-motion-search-next #'evil-ex-search-next
                        :bind ((evil-ex-search-highlight-all nil)))
    (evilem-make-motion evilem-motion-search-previous #'evil-ex-search-previous
                        :bind ((evil-ex-search-highlight-all nil)))
    (evilem-make-motion evilem-motion-search-word-forward #'evil-ex-search-word-forward
                        :bind ((evil-ex-search-highlight-all nil)))
    (evilem-make-motion evilem-motion-search-word-backward #'evil-ex-search-word-backward
                        :bind ((evil-ex-search-highlight-all nil)))
    (put 'visible 'bounds-of-thing-at-point (lambda () (cons (window-start) (window-end))))
    (evilem-make-motion evilem-motion-forward-word-begin #'evil-forward-word-begin :scope 'visible)
    (evilem-make-motion evilem-motion-forward-WORD-begin #'evil-forward-WORD-begin :scope 'visible)
    (evilem-make-motion evilem-motion-forward-word-end #'evil-forward-word-end :scope 'visible)
    (evilem-make-motion evilem-motion-forward-WORD-end #'evil-forward-WORD-end :scope 'visible)
    (evilem-make-motion evilem-motion-backward-word-begin #'evil-backward-word-begin :scope 'visible)
    (evilem-make-motion evilem-motion-backward-WORD-begin #'evil-backward-WORD-begin :scope 'visible)
    (evilem-make-motion evilem-motion-backward-word-end #'evil-backward-word-end :scope 'visible)
    (evilem-make-motion evilem-motion-backward-WORD-end #'evil-backward-WORD-end :scope 'visible))
#+end_src
** =evil-surround=
This package emulates [[https://github.com/tpope/vim-surround/][surround.vim]][fn:6].
#+begin_src emacs-lisp -n
  (use-package evil-surround
    :after evil
    :ensure t
    :commands (global-evil-surround-mode
               evil-surround-edit
               evil-Surround-edit
               evil-surround-region)
    :config (global-evil-surround-mode 1))
#+end_src
** =evil-embrace=
Evil integration of[[https://github.com/cute-jumper/embrace.el/][embrace.el]][fn:7].
#+begin_src emacs-lisp -n
  (use-package evil-embrace
    :after evil evil-surround
    :ensure t
    :commands embrace-add-pair embrace-add-pair-regexp
    :hook (LaTeX-mode . embrace-LaTeX-mode-hook)
    :hook (org-mode . embrace-org-mode-hook)
    :hook (ruby-mode . embrace-ruby-mode-hook)
    :hook (emacs-lisp-mode . embrace-emacs-lisp-mode-hook)
    :init
    (with-eval-after-load 'evil-surround
      (evil-embrace-enable-evil-surround-integration))
    :config
    (setq evil-embrace-show-help-p nil))
#+end_src
** =evil-traces=
Some evil-ex command previews[fn:8].
#+begin_src emacs-lisp -n
  (use-package evil-traces
    :ensure t
    :after evil-ex
    :config
    (evil-traces-mode))
#+end_src
** =evil-visualstar=
 Start a * or # search from the visual selection[fn:9].
#+begin_src emacs-lisp -n
  (use-package evil-visualstar
    :after evil
    :ensure t
    :commands (evil-visualstar/begin-search
               evil-visualstar/begin-search-forward
               evil-visualstar/begin-search-backward)
    :init
    (evil-define-key* 'visual 'global
                      "*" #'evil-visualstar/begin-search-forward
                      "#" #'evil-visualstar/begin-search-backward))
#+end_src
** =exato=
🔖 EXATO: Evil XML Attributes Text Object[fn:10].
#+begin_src emacs-lisp -n
  (use-package exato
    :ensure t
    :after evil
    :demand t
    :commands evil-outer-xml-attr evil-inner-xml-attr)
#+end_src
** =evil-multiedit=
Multiple cursors for evil-mode, based on iedit[fn:11].
#+begin_src emacs-lisp -n
  (use-package evil-multiedit
    :after evil
    :ensure t
    :demand t
    :config
    (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match)
    (evil-multiedit-mode)
    (evil-multiedit-default-keybinds))
#+end_src
** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-evil)
  ;;; config-evil.el ends here
#+end_src
* Keybindings
:PROPERTIES:
:header-args: :tangle ./modules/config-keybindings.el :mkdirp t
:ID:       3b19d30f-9f31-4328-9a90-cccb19f23fac
:END:
** header                                                         :noexport:
#+begin_src emacs-lisp +n
  ;;; config-keybindings --- Keybindings -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
** =general.el=
More convenient key definitions in emacs[fn:12].
#+begin_src emacs-lisp -n
    (use-package general
      :ensure t
      :init
      (with-eval-after-load 'evil
        (general-evil-setup))
      (general-auto-unbind-keys)
      :config
      (general-override-mode)
      (general-create-definer +config/leader-key
        :keymaps 'override
        :states  '(insert emacs normal hybrid motion visual operator)
        :prefix "SPC"
        :non-normal-prefix "s-SPC")
      (general-create-definer +config/local-leader
        :keymaps 'override
        :states '(emacs normal hybrid motion visual operator)
        :prefix "m"
        :non-normal-prefix "s-m"
        "" '(:ignore t :which-key (lambda (arg) `(,(cadr (split-string (car arg) " ")) . ,(replace-regexp-in-string "-mode$" "" (symbol-name major-mode))))))
      ;; useful macro
      (defmacro +config/leader-menu! (name infix-key &rest body)
        "Create a definer NAME `+config/leader-NAME' wrapping `+config/leader-key'.
          Create prefix map: `+config/leader-NAME-map'. Prefix bindings in BODY with INFIX-KEY."
        (declare (indent 2))
        `(progn
           (general-create-definer ,(intern (concat "+config/leader-" name))
             :wrapping +config/leader-key
             :prefix-map (quote ,(intern (concat "+config/leader-" name "-map")))
             :infix ,infix-key
             :wk-full-keys nil
             "" '(:ignore t :which-key ,name))
           (,(intern (concat "+config/leader-" name))
            ,@body)))
      ;; keybindings
      (+config/leader-key
        ";" 'pp-eval-expression
        ":" 'execute-extended-command
        "." '(find-file :wk "find file")
        "^" '(subword-capitalize :wk "Capitalize subword")
        "u" 'universal-argument)
            ;;; First level menu
      (+config/leader-menu! "buffer" "b")
      (+config/leader-menu! "files" "f")
      (+config/leader-menu! "find" "gf")
      (+config/leader-menu! "go" "g")
      (+config/leader-menu! "insert" "i")
      (+config/leader-menu! "mail" "M-m")
      (+config/leader-menu! "mark" "m")
      (+config/leader-menu! "notes" "n")
      (+config/leader-menu! "open" "o")
      (+config/leader-menu! "quit" "q")
      (+config/leader-menu! "register" "gr")
      (+config/leader-menu! "tree" "t")
      (+config/leader-menu! "tab" "t TAB")
      (+config/leader-menu! "vterm" "tv")
      (+config/leader-menu! "window" "w")
            ;;; keybindings
            ;;;; buffer
      (+config/leader-buffer
        "[" '(previous-buffer :wk "previous buffer")
        "]" '(next-buffer :wk "next buffer")
        "TAB" '((lambda () (interactive) (switch-to-buffer nil)) :wk "other-buffer")
        "b" '(switch-to-buffer :wk "switch to buffer")
        "s" '(basic-save-buffer :wk "save buffer")
        "c" '(clone-indirect-buffer :wk "clone buffer")
        "C" '(clone-indirect-buffer-other-window :wk "clone buffer other window")
        "d" '(kill-current-buffer :wk "kill current buffer")
        "i" 'ibuffer
        "k" '(kill-buffer :wk "kill buffer")
        "l" '(evil-switch-to-windows-last-buffer :wk "Switch to last open buffer")
        "m" '((lambda () (interactive) (switch-to-buffer "*Messages*")) :wk "switch to messages buffer")
        "n" '(next-buffer :wk "next buffer")
        "N" '(evil-buffer-new :wk "New unnamed buffer")
        "p" '(previous-buffer :wk "previous buffer")
        "o" '((lambda () (interactive) (switch-to-buffer nil)) :wk "other-buffer")
        "r" '(revert-buffer-quick :wk "revert buffer")
        "R" '(rename-buffer :wk "rename buffer")
        "x" '((lambda () (interactive) (switch-to-buffer "*scratch*")) :wk "switch to scratch buffer")
        "z" '(bury-buffer :wk "bury buffer"))
            ;;;; files
      (+config/leader-files
        "D" 'dired
        "d" 'dired-jump
        "f" '(find-file :wk "find file")
        "F" '(find-file-other-frame :wk "find file other frame")
        "k" 'delete-frame
        "r" 'recentf
        "S" '(write-file :wk "save file")
        "s" '(save-buffer :wk "save buffer")
        "w" '(find-file-other-window :wk "find file other window"))
            ;;;; find
      (+config/leader-find
        "g" 'grep
        "r" '(rgrep :wk "recursive grep"))
            ;;;; help
      (+config/leader-key
        "h" (general-simulate-key "C-h"
              :state '(normal visual)
              :name general-SPC-h-simulates-C-h
              :docstring "Simulates C-h in normal and visual mode."
              :which-key "Help"))
            ;;;; go
      (+config/leader-go
        "'" '(:ignore t :wk "avy")
        "''" 'avy-resume
        "'c" 'evil-avy-goto-char
        "'l" 'evil-avy-goto-line
        "'w" 'evil-avy-goto-word-or-subword-1)
            ;;;; insert
      (+config/leader-insert
        "u" '(insert-char :wk "insert character"))
            ;;;; mark
      (+config/leader-mark
        "m" '(bookmark-set :wk "set bookmark")
        "b" '(bookmark-jump :wk "jump to bookmark")
        "B" '(bookmark-jump-other-window :wk "jump to bookmark other window")
        "C-c b" '(bookmark-jump-other-frame :wk "jump to bookmark other frame")
        ;; "c" '(consult-bookmark :wk "consult bookmark") ;; require `consult' package
        "l" '(bookmark-bmenu-list :wk "list bookmarks")
        "L" '(bookmark-load :wk "load bookmark")
        "d" '(bookmark-delete :wk "delete bookmark")
        "D" '(bookmark-delete-all :wk "delete all bookmarks")
        "s" '(bookmark-save :wk "save bookmark")
        "r" '(bookmark-rename :wk "rename bookmark"))
            ;;;; open
      (+config/leader-open
        "i" '((lambda () (interactive) (find-file user-init-file)) :wk "open Emacs configuration file"))
            ;;;; register
      (+config/leader-register
        ;; "#" '(consult-register :wk "consult-register") ;; require `consult' package
        "+" '(increment-register :wk "augment content of register")
        "C-@" '(point-to-register :wk "store current point to register")
        "C-SPC" '(point-to-register :wk "store current point to register")
        "M-w" '(copy-rectangle-as-kill :wk "copy region-rectangle and save")
        "SPC" '(point-to-register :wk "store current point to register")
        "c" '(clear-rectangle :wk "blank out region-rectangle")
        "d" '(delete-rectangle :wk "delete region-rectangle")
        "f" '(frameset-to-register :wk "store frameset to register")
        "g" '(insert-register :wk "insert register")
        "i" '(insert-register :wk "insert register")
        "j" '(jump-to-register :wk "jump to register")
        "k" '(kill-rectangle :wk "cut rectangle into killed-rectangle")
        "l" '(bookmark-bmenu-list :wk "display existing bookmarks")
        "m" '(bookmark-set :wk "set bookmark")
        "M" '(bookmark-set-no-overwrite :wk "set bookmark no overwrite")
        "n" '(number-to-register :wk "store a number in a register")
        "N" '(rectangle-number-lines :wk "insert number in front of region-rectangle")
        "o" '(open-rectangle :wk "blank out region-rectangle")
        "r" '(copy-rectangle-to-register :wk "copy rectangle-region to register")
        "s" '(copy-to-register :wk "copy region to register")
        "t" '(string-rectangle :wk "replace rectangle with string")
        "x" '(copy-to-register :wk "copy region to register")
        "w" '(window-configuration-to-register :wk "store window configuration to register")
        "y" '(yank-rectangle :wk "yank last killed rectangle with upper left corner at point"))
            ;;;; window
      (+config/leader-window
        "C-o" '(delete-other-windows :wk "delete other windows")
        "[" '(evil-window-left :wk "left window")
        "]" '(evil-window-right :wk "right window")
        "+" '(enlarge-window :wk "enlarge window")
        "-" '(shrink-window :wk "shrink window")
        "}" '(enlarge-window-horizontally :wk "enlarge window horizontally")
        "{" '(shrink-window-horizontally :wk "shrink window horizontally")
        "+" 'evil-window-increase-height
        "-" 'evil-window-decrease-height
        ":" 'evil-ex
        "<" 'evil-window-decrease-width
        "=" 'balance-windows
        ">" 'evil-window-increase-height
        "_" 'evil-window-set-height
        "b" 'evil-window-bottom-right
        "c" 'evil-window-delete
        "d" '(delete-window :wk "delete window")
        "h" 'evil-window-left
        "f" '(ffap-other-window :wk "ffap other window")
        "j" 'evil-window-down
        "k" 'evil-window-up
        "l" 'evil-window-right
        "n" 'evil-window-new
        "p" 'evil-window-mru
        "q" 'evil-quit
        "r" 'evil-window-rotate-downwards
        "R" 'evil-window-rotate-upwards
        "s" 'evil-window-split
        "T" '(tear-off-window :wk "tear off window")
        "t" 'evil-window-top-left
        "u" 'winner-undo
        "v" 'evil-window-vsplit
        "w" '(other-window :wk "other window")
        "W" 'evil-window-prev
        "x" 'evil-window-exchange
        "|" 'evil-window-set-width
        "<left>" 'evil-window-left
        "<right>" 'evil-window-right
        "<down>" 'evil-window-down
        "<up>" 'evil-win-up)
            ;;;; quit
      (+config/leader-quit
        "q" '(save-buffers-kill-terminal :wk "quit and save")
        "R" '(restart-emacs :wk "restart Emacs"))
      )
#+end_src
** =notmuch=
#+begin_src emacs-lisp -n
    (with-eval-after-load 'notmuch
      (+config/leader-key
        "M-m" '(:ignore t :wk "Mail")
        "M-m m" 'notmuch))
#+end_src
** =org-mode=
#+begin_src emacs-lisp -n
    (general-def
      "C-c c" 'org-capture
      "C-c a" 'org-agenda
      "C-c l" 'org-store-link)
#+end_src
** footer                                                         :noexport:
#+begin_src emacs-lisp -n
    (provide 'config-keybindings)
    ;;; config-keybindings.el ends here
#+end_src
* UI
:PROPERTIES:
:header-args: :tangle ./modules/config-ui.el :mkdirp t
:END:
** header                                                         :noexport:
#+begin_src emacs-lisp +n
  ;;; config-ui --- Themes and UI configuration file -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
** =which-key=
 Emacs package that displays available keybindings in popup[fn:13]. This is one of the top /Emacs/ packages that I must have in my configuration.
#+begin_src emacs-lisp -n
  (use-package which-key
    :ensure
    :custom
    (which-key-lighter "")
    (which-key-sort-order #'which-key-key-order-alpha)
    (which-key-sort-uppercase-first nil)
    (which-key-add-column-padding 1)
    (which-key-max-display-columns nil)
    (which-key-min-display-lines 6)
    (which-key-compute-remaps t)
    (which-key-side-window-slot -10)
    (which-key-separator " → ")
    (which-key-allow-evil-operators t)
    (which-key-use-C-h-commands t)
    (which-key-show-remaining-keys t)
    (which-key-show-prefix 'bottom)
    :config
    (which-key-mode)
    (which-key-setup-side-window-bottom)
    (which-key-setup-minibuffer)
    (define-key which-key-mode-map (kbd "C-x <f5>") 'which-key-C-h-dispatch))
#+end_src
** =all-the-icons=
A utility package to collect various Icon Fonts and propertize them within Emacs[fn:14].
#+begin_src emacs-lisp -n
  (use-package all-the-icons
    :ensure
    :if (display-graphic-p))
#+end_src
This needs a manual intervention from the user to install the fonts (by running the =all-the-icons-install-fonts= command).
** =doom-themes=
 A megapack of themes for GNU Emacs[fn:15].
#+begin_src emacs-lisp -n
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-nord t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;; (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src
** =doom-modeline=
A fancy and fast mode-line inspired by minimalism design[fn:16].
#+begin_src emacs-lisp -n
  (use-package doom-modeline
    :ensure
    :hook (after-init . doom-modeline-mode))
#+end_src
** =dashboard=
An extensible emacs dashboard[fn:17].
#+begin_src emacs-lisp -n
  ;; use-package with package.el:
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))
          ;;dashboard-banner-logo-title (format "Welcome, %s" user-full-name)
          dashboard-items '((recents . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5))
          dashboard-projects-switch-function 'projectile-persp-switch-project
          dashboard-week-agenda t
          dashboard-filter-agenda-entry 'dashboard-no-filter-agenda
          ))
#+end_src
** =tab-bar=                                                       :builtin:
Although I used /Perspective/ more, there are some cases where it's easier with tabs.
#+begin_src emacs-lisp -n
  (use-package tab-bar
    :init
    (setq tab-bar-show 1
          tab-bar-close-button-show nil
          tab-bar-tab-hints t
          tab-bar-new-button-show nil
          tab-bar-separator " "
          tab-bar-auto-width nil
          tab-bar-position t))
#+end_src
#+begin_src emacs-lisp -n
  (use-package frame
    :init
    (blink-cursor-mode 1)
    :config
    (cond
     ((find-font (font-spec :family "OverpassM Nerd Font Mono"))
      (set-frame-font "OverpassM Nerd Font Mono 10" nil t))
     ((find-font (font-spec :family "Ubuntu Mono"))
      (set-frame-font "Ubuntu Mono 10" nil t))
     ((find-font (font-spec :family "Fira Code Retina"))
      (set-frame-font "Fira Code Retina 10" nil t))
     ((find-font (font-spec :family "Source Code Pro"))
      (set-frame-font "Source Code Pro 10" nil t))
     ((find-font (font-spec :family "DejaVu Sans Mono"))
      (set-frame-font "DejaVu Sans Mono 10" nil t))))
#+end_src
** =window=                                                        :builtin:
#+begin_src emacs-lisp -n
  (use-package window
    :config
    (setq split-width-threshold 160))
#+end_src
** =display-line-number=                                           :builtin:
#+begin_src emacs-lisp -n
  (use-package display-line-numbers
    :init
    (setq display-line-numbers-type t)
    :hook (prog-mode . display-line-numbers-mode)
    :custom
    (display-line-numbers-grow-only t))
#+end_src
** =help-at-pt=                                                    :builtin:
#+begin_src emacs-lisp -n
  (use-package help-at-pt
    :custom
    (help-at-pt-display-when-idle t))
#+end_src
** =hidehow=                                                       :builtin:
#+begin_src emacs-lisp -n
  (use-package hideshow
    :hook (prog-mode . hs-minor-mode))
#+end_src
** =uniquify=                                                      :builtin:
#+begin_src emacs-lisp -n
  (use-package uniquify
    :ensure nil
    :config
    (setq uniquify-buffer-name-style 'forward
          uniquify-separator " • "
          uniquify-after-kill-buffer-p t
          uniquify-ignore-buffers-re "^\\*"))
#+end_src
** =speedbar=                                                      :builtin:
#+begin_src emacs-lisp -n
  (use-package speedbar
    :custom
    (speedbar-use-images nil)
    (speedbar-update-flag t)
    (speedbar-frame-parameters '((name . "speedbar")
                                 (title . "speedbar")
                                 (minibuffer . nil)
                                 (border-width . 2)
                                 (menu-bar-lines . 0)
                                 (tool-bar-lines . 0)
                                 (unsplittable . t)
                                 (left-fringe . 10)))
    :config
    (speedbar-add-supported-extension
     (list
    ;;;; General Lisp Languages
      ".cl"
      ".li?sp"
    ;;;; Lua/Fennel (Lisp that transpiles to lua)
      ".lua"
      ".fnl"
      ".fennel"
    ;;;; JVM languages (Java, Kotlin, Clojure)
      ".kt"
      ".mvn"
      ".gradle"
      ".properties"
      ".cljs?"
    ;;;; shellscript
      ".sh"
      ".bash"
    ;;;; Web Languages and Markup/Styling
      ".php"
      ".ts"
      ".html?"
      ".css"
      ".less"
      ".scss"
      ".sass"
    ;;;; Makefile
      "makefile"
      "MAKEFILE"
      "Makefile"
    ;;;; Data formats
      ".json"
      ".yaml"
      ".toml"
    ;;;; Notes and Markup
      ".md"
      ".markdown"
      ".org"
      ".txt"
      "README")))
#+end_src
** =winner=                                                        :builtin:
#+begin_src emacs-lisp -n
  (use-package winner
    :init
    (winner-mode 1))
#+end_src
** =time=                                                          :builtin:
#+begin_src emacs-lisp -n
  (use-package time
    :hook (after-init . display-time-mode)
    :config
    (when (file-directory-p (expand-file-name ".mail" (getenv "HOME")))
      (setq display-time-mail-directory (expand-file-name ".mail" (getenv "HOME"))))
    :custom
    (display-time-24hr-format t)
    (display-time-day-and-date t))
#+end_src
** =paren=                                                         :builtin:
#+begin_src emacs-lisp -n
  (use-package paren
    :config
    (show-paren-mode 1)
    :custom
    (show-paren-style 'mixed))
#+end_src
** =hl-line=                                                       :builtin:
#+begin_src emacs-lisp -n
  (use-package hl-line
    :config
    (global-hl-line-mode 1))
#+end_src
** =font-core=                                                     :builtin:
#+begin_src emacs-lisp -n
  (use-package font-core
    :init
    (global-font-lock-mode t))
#+end_src
** =menu-bar=, =tool-bar=, and =scroll-bar=                        :builtin:
#+begin_src emacs-lisp -n
  (use-package menu-bar
    :init
    (menu-bar-mode -1))

  (use-package tool-bar
    :init
    (tool-bar-mode -1))

  (use-package scroll-bar
    :init
    (scroll-bar-mode -1))
#+end_src
** =xt-mouse=                                                      :builtin:
#+begin_src emacs-lisp -n
  (use-package xt-mouse
    :config
    (xterm-mouse-mode 1))
#+end_src
** =avy=                                                           :builtin:
#+begin_src emacs-lisp -n
  (use-package avy
    :after evil
    :ensure ;; when `use-package-always-ensure' is nil
    :bind
    (([remap goto-char] . evil-avy-goto-char)
     ([remap goto-line] . evil-avy-goto-line)
     ("M-g l" . evil-avy-goto-line))
    :config
    ;; (evil-define-key 'normal 'global (kbd "<localleader>gc") 'evil-avy-goto-char)
    ;; (evil-define-key 'normal 'global (kbd "<localleader>gl") 'evil-avy-goto-line-below)
    ;; (evil-define-key 'normal 'global (kbd "<localleader>gL") 'evil-avy-goto-line-above)
    )
#+end_src
** =tabify=                                                        :builtin:
#+begin_src emacs-lisp -n
  (use-package tabify
    :ensure nil
    :config
    (setq tabify-regexp "^\t* [ \t]+"))
#+end_src
** =rainbow-mode=, =rainbow-identifiers=, and =rainbow-delimiters=
Making /Emacs/ more colourful.
#+begin_src emacs-lisp -n
  (use-package rainbow-mode
    :ensure
    :hook (prog-mode . rainbow-mode))

  (use-package rainbow-identifiers
    :ensure
    :hook (prog-mode . rainbow-identifiers-mode))

  (use-package rainbow-delimiters
    :ensure
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** =nerd-fonts=
[[https://github.com/twlz0ne/nerd-fonts.el/][This package]] still not available at /Melpa/, so I have to clone it as a submodule.
#+begin_src emacs-lisp -n
  (when (file-directory-p (expand-file-name "site-lisp/nerd-fonts" user-emacs-directory))
    (add-to-list 'load-path (expand-file-name "site-lisp/nerd-fonts" user-emacs-directory)))

  (use-package nerd-fonts)
#+end_src
** =helpful=
#+begin_src emacs-lisp -n
  (use-package helpful
    :ensure
    :bind
    ("C-h f" . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))
#+end_src
** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-ui)
  ;;; config-ui.el ends here
#+end_src
* Builtin
:PROPERTIES:
:header-args: :tangle ./modules/config-builtin.el :mkdirp t
:END:
** header                                                         :noexport:
#+begin_src emacs-lisp +n
  ;;; config-builtin --- `Emacs' builtin package configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
** byte compilation                                                :builtin:
#+begin_src emacs-lisp -n
  (use-package bytecomp
    :custom
    (byte-compile-warnings nil))
#+end_src
** Base configuration                                              :builtin:
#+begin_src emacs-lisp -n
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p
          tab-always-indent 'complete)
    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t)
    :custom
    (read-buffer-completion-ignore-case t)
    (use-short-answers t)
    (window-resize-pixelwise t)
    (frame-resize-pixelwise t)
    (ring-bell-function #'ignore)
    (scroll-preserve-screen-position t)
    (scroll-conservatively 101)
    (fast-but-imprecise-scrolling t)
    (truncate-partial-width-windows nil)
    (fill-column 80)
    (enable-recursive-minibuffers t)
    (use-file-dialog nil)
    (create-lockfiles nil)
    (delete-by-moving-to-trash t)
    (inhibit-startup-screen t)
    :config
    (setq completion-ignore-case t
          load-prefer-newer t
          auto-window-vscroll nil
          inhibit-compacting-font-caches t
          redisplay-skip-fontification-on-input t)
    (set-default 'indicate-empty-lines t)
    (setq-default x-stretch-cursor t))
#+end_src
** =saveplace=                                                     :builtin:
#+begin_src emacs-lisp -n
  (use-package saveplace
    :init
    (save-place-mode 1)
    :custom
    (save-place-file (expand-file-name "places" user-emacs-directory)))
#+end_src
** =autorevert=                                                    :builtin:
#+begin_src emacs-lisp -n
  (use-package autorevert
    :init
    (global-auto-revert-mode 1)
    :custom
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    (auto-revert-stop-on-user-input nil))
#+end_src
** =savehist=                                                      :builtin:
#+begin_src emacs-lisp -n
  (use-package savehist
    :init
    (savehist-mode 1)
    :custom
    (savehist-file (expand-file-name "history" user-emacs-directory))
    (savehist-coding-system 'utf-8)
    (savehist-additional-variables
     '(evil-jumps-history
       kill-ring
       register-alist
       mark-ring
       global-mark-ring
       search-ring
       regexp-search-ring)))
#+end_src
** =prog-mode=                                                     :builtin:
#+begin_src emacs-lisp -n
  (use-package prog-mode
    :hook ((prog-mode . prettify-symbols-mode)
           (prog-mode . visual-line-mode)
           ;; (prog-mode . (lambda () (electric-pair-mode 1)))
           )
    :config
    (setq prettify-symbols-alist
          '(("|>" . "▷")
            ("<|" . "◁")
            ("->>" . "↠  ")
            ("->" . "→ ")
            ("<-" . "← ")
            ("=>" . "⇒"))))
#+end_src
** =select=                                                        :builtin:
#+begin_src emacs-lisp -n
  (use-package select
    :custom
    (select-enable-clipboard t))
#+end_src
** Compression mode                                                :builtin:
#+begin_src emacs-lisp -n
  (use-package jka-cmpr-hook
    :custom
    (auto-compression-mode t))
#+end_src
** =recentf=                                                       :builtin:
#+begin_src emacs-lisp -n
  (use-package recentf
    :bind ("C-c f" . recentf)
    :custom
    (recentf-max-saved-items 250)
    (recentf-max-menu-items 300)
    (recentf-exclude
     `("/elpa/" ;; ignore all files in elpa directory
       "recentf" ;; remove the recentf load file
       ".*?autoloads.el$"
       "treemacs-persist"
       "company-statistics-cache.el" ;; ignore company cache file
       "/intero/" ;; ignore script files generated by intero
       "/journal/" ;; ignore daily journal files
       ".gitignore" ;; ignore `.gitignore' files in projects
       "/tmp/" ;; ignore temporary files
       "NEWS" ;; don't include the NEWS file for recentf
       "bookmarks"  "bmk-bmenu" ;; ignore bookmarks file in .emacs.d
       "loaddefs.el"
       "^/\\(?:ssh\\|su\\|sudo\\)?:" ;; ignore tramp/ssh files
       (concat "^" (regexp-quote (or (getenv "XDG_RUNTIME_DIR")))))))
#+end_src
** =eldoc=                                                         :builtin:
#+begin_src emacs-lisp -n
  (use-package eldoc
    :hook ((prog-mode . eldoc-mode)
           (emacs-lisp-mode . eldoc-mode)
           (lisp-interaction-mode . eldoc-mode)))
#+end_src
** =bookmark=                                                      :builtin:
#+begin_src emacs-lisp -n
  (use-package bookmark
    :custom
    (bookmark-save-flag 1)
    (bookmark-default-file (expand-file-name ".bookmark" user-emacs-directory)))
#+end_src
** =executable=                                                    :builtin:
#+begin_src emacs-lisp -n
  (use-package executable
    :hook
    (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src
** =files=                                                         :builtin:
#+begin_src emacs-lisp -n
  (use-package files
    :config
    (defun full-auto-save ()
      (interactive)
      (save-excursion
        (dolist (buf (buffer-list))
          (set-buffer buf)
          (if (and (buffer-file-name) (buffer-modified-p))
              (basic-save-buffer)))))
    (add-hook 'auto-save-hook 'full-auto-save)
    (nconc
     auto-mode-alist
     '(("/LICENSE\\'" . text-mode)
       ("\\.log\\'" . text-mode)
       ("rc\\'" . conf-mode)
       ("\\.\\(?:hex\\|nes\\)\\'" . hexl-mode)))
    :custom
    (confirm-kill-emacs #'yes-or-no-p)
    (revert-without-query (list "."))
    (find-file-visit-truename t)
    (version-control t)
    (backup-by-copying t)
    (delete-old-versions t)
    (kept-new-versions 6)
    (kept-old-versions 2)
    (auto-save-include-big-deletions t)
    (auto-save-list-file-prefix (expand-file-name ".autosave/" user-emacs-directory))
    (backup-directory-alist `(("." . ,(expand-file-name ".backup" user-emacs-directory))))
    (auto-mode-case-fold nil)
    (require-final-newline t))
#+end_src
** =tramp=                                                         :builtin:
#+begin_src emacs-lisp -n
  (use-package tramp
    :custom
    (tramp-backup-directory-alist backup-directory-alist)
    (tramp-auto-save-directory (expand-file-name ".tramp-autosave/" user-emacs-directory)))
#+end_src
** =abbrev=                                                        :builtin:
#+begin_src emacs-lisp -n
  (use-package abbrev
    :ensure nil)
#+end_src
** =ffap=                                                          :builtin:
#+begin_src emacs-lisp -n
  (use-package ffap
    :custom
    (ffap-machine-p-known 'reject))
#+end_src
** =epg-config=                                                    :builtin:
#+begin_src emacs-lisp -n
  (use-package epg-config
    :custom
    (epg-pinentry-mode 'loopback))
#+end_src
** =make-mode=                                                     :builtin:
#+begin_src emacs-lisp -n
  (use-package make-mode
    :config
    (add-hook 'makefile-mode-hook 'indent-tabs-mode))
#+end_src
** =ispell=                                                        :builtin:
#+begin_src emacs-lisp -n
  (use-package ispell
    :custom
    (ispell-program-name "hunspell")
    (ispell-dictionary "english")
    (ispell-really-hunspell t)
    :config
    (with-eval-after-load 'ispell
      (when (executable-find ispell-program-name)
        (add-hook 'text-mode-hook #'flyspell-mode)
        (add-hook 'prog-mode-hook #'flyspell-prog-mode)))
    (add-to-list 'ispell-skip-region-alist
                 '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
    (add-to-list 'ispell-skip-region-alist
                 '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
    (add-to-list 'ispell-skip-region-alist
                 '("#\\+begin_src" . "#\\+end_src"))
    (add-to-list 'ispell-skip-region-alist
                 '("#\\+begin_example" . "#\\+end_example"))
    (add-to-list 'ispell-skip-region-alist
                 '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))
    (let ((hunspell-en_us-path (expand-file-name "/usr/share/hunspell/en_US-large.aff" (getenv "HOME")))
          (hunspell-en_GB-path (expand-file-name "/usr/share/hunspell/en_GB-large.aff" (getenv "HOME")))
          (hunspell-id_ID-path (expand-file-name "/usr/share/hunspell/id_ID.aff" (getenv "HOME"))))
      (when (file-exists-p hunspell-en_us-path)
        (add-to-list 'ispell-hunspell-dict-paths-alist
                     `("american" ,hunspell-en_us-path)))
      (when (file-exists-p hunspell-en_GB-path)
        (add-to-list 'ispell-hunspell-dict-paths-alist
                     `("english" ,hunspell-en_GB-path)))
      (when (file-exists-p hunspell-id_ID-path)
        (add-to-list 'ispell-hunspell-dict-paths-alist
                     `("id_ID" ,hunspell-id_ID-path)))))
#+end_src
** =whitespace=                                                    :builtin:
#+begin_src emacs-lisp -n
  (use-package whitespace
    :hook (((prog-mode text-mode conf-mode) . whitespace-mode)
           (before-save . whitespace-cleanup))
    :custom
    (whitespace-style '(face empty trailing tab-mark
                             indentation::space))
    (whitespace-action '(warn-if-read-only))
    :config
    (global-whitespace-mode))
#+end_src
** =subword=                                                       :builtin:
#+begin_src emacs-lisp -n
  (use-package subword
    :init
    (global-subword-mode 1))
#+end_src
** =ediff=                                                         :builtin:
#+begin_src emacs-lisp -n
  (use-package ediff
    :config
    (setq ediff-diff-options "-w"
          ediff-split-window-function 'split-window-horizontally
          ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src
** =delsel=                                                        :builtin:
#+begin_src emacs-lisp -n
  (use-package delsel
    :init
    (delete-selection-mode))
#+end_src
** =text-mode=                                                     :builtin:
#+begin_src emacs-lisp -n
  (use-package text-mode
    :ensure nil
    :config
    (setq-default sentence-end-double-space nil))
#+end_src
** =flyspell=                                                      :builtin:
#+begin_src emacs-lisp -n
  (use-package flyspell
    :custom
    (flyspell-issue-welcome-flag nil)
    (flyspell-issue-message-flag nil)
    :hook (((org-mode message-mode TeX-mode rst-mode mu4e-composer-mode git-commit-mode text-mode)
            . flyspell-mode)
           (prog-mode . flyspell-prog-mode)))
#+end_src
** =flymake=                                                       :builtin:
#+begin_src emacs-lisp -n
  (use-package flymake
    :hook (prog-mode . flymake-mode))
#+end_src
** =imenu=                                                         :builtin:
#+begin_src emacs-lisp -n
  (use-package imenu
    :custom
    (imenu-auto-rescan t))
#+end_src
** =simple=                                                        :builtin:
#+begin_src emacs-lisp -n
  (use-package simple
    :hook ((makefile-mode . indent-tabs-mode)
           (text-mode . visual-line-mode))
    :init
    (transient-mark-mode t)
    :custom
    (save-interprogram-paste-before-kill t)
    (shift-select-mode nil)
    (kill-do-not-save-duplicates t)
    (shift-select-mode nil)
    (set-mark-command-repeat-pop t)
    (indent-tabs-mode nil)
    (column-number-mode t)
    (idle-update-delay 1.0)
    :config
    (with-eval-after-load 'evil
      (evil-set-initial-state #'message-mode 'insert)))
#+end_src
** =elec-pair=                                                     :builtin:
#+begin_src emacs-lisp -n
  (use-package elec-pair
    :init
    (electric-pair-mode -1))
#+end_src
** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-builtin)
  ;;; config-builtin.el ends here
#+end_src
* Completion
:PROPERTIES:
:header-args: :tangle ./modules/config-completion.el :mkdirp t
:END:
** header                                                         :noexport:
#+begin_src emacs-lisp +n
  ;;; config-completion --- completion configuration file -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
** =vertico=
#+begin_src emacs-lisp -n
  ;; Enable vertico
  (use-package vertico
    :ensure
    :init
    (vertico-mode)
    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)
    ;; Show more candidates
    ;; (setq vertico-count 20)
    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)
    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)
    :config
    (keymap-set vertico-map "RET" #'vertico-directory-enter)
    (keymap-set vertico-map "DEL" #'vertico-directory-delete-char)
    (keymap-set vertico-map "M-DEL" #'vertico-directory-delete-word)
    (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
    (vertico-mouse-mode 1)
    (add-to-list 'savehist-additional-variables 'vertico-repeat-history)
    (keymap-global-set "M-R" #'vertico-repeat)
    (keymap-set vertico-map "M-P" #'vertico-repeat-previous)
    (keymap-set vertico-map "M-N" #'vertico-repeat-next)
    (keymap-set vertico-map "S-<prior>" #'vertico-repeat-previous)
    (keymap-set vertico-map "S-<next>" #'vertico-repeat-next)
    (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
    (keymap-set vertico-map "M-q" #'vertico-quick-insert)
    (keymap-set vertico-map "C-q" #'vertico-quick-exit))

  (use-package minibuffer
    :ensure nil
    :custom
    (read-file-name-completion-ignore-case t)
    (completion-cycle-threshold 3)
    (completion-detailed t))

  (use-package xref
    :custom
    (xref-show-definitions-function 'xref-show-definitions-completing-read))
#+end_src
** =marginalia=
#+begin_src emacs-lisp -n
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :ensure
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src
** =nerd-icons-completion=
#+begin_src emacs-lisp -n
  (use-package nerd-icons-completion
    :ensure
    :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
    :config
    (nerd-icons-completion-mode))
#+end_src
** =orderless=
#+begin_src emacs-lisp -n
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless partial-completion basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** =consult=
#+begin_src emacs-lisp -n
  (use-package consult
    :ensure
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)
    ;; The :init configuration is always executed (Not lazy)
    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)
    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)
    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config
    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))
    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"
    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src
** =corfu=
#+begin_src emacs-lisp -n
  (use-package corfu
    :ensure t
    ;; Optional customizations
    :hook ((eshell-mode . (lambda ()
                            (setq-local corfu-auto nil)
                            (corfu-mode))))
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    (corfu-quit-no-match 'separator)      ;; Never quit, even if there is no match
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode)
    :bind
    (:map corfu-map
          ("TAB" . corfu-next)
          ([tab] . corfu-next)
          ("S-TAB" . corfu-previous)
          ([backtab] . corfu-previous)))
#+end_src
** =nerd-icons-corfu=
#+begin_src emacs-lisp -n
  (use-package nerd-icons-corfu
    :ensure
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
    (setq nerd-icons-corfu-mapping
          '((array :style "cod" :icon "symbol_array" :face font-lock-type-face)
            (boolean :style "cod" :icon "symbol_boolean" :face font-lock-builtin-face)
            ;; ...
            (t :style "cod" :icon "code" :face font-lock-warning-face))))
#+end_src
** =cape=
#+begin_src emacs-lisp -n
  ;; Add extensions
  (use-package cape
    :ensure
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-elisp-symbol)
           ("C-c p e" . cape-elisp-block)
           ("C-c p a" . cape-abbrev)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p :" . cape-emoji)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src
** =tempel=
#+begin_src emacs-lisp -n
  (use-package tempel
    :ensure
    :custom
    (tempel-trigger-prefix "<")
    :bind (("M-+" . tempel-complete)
           ("M-*" . tempel-insert))
    :init
      (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))

    (add-hook 'conf-mode-hook 'tempel-setup-capf)
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)
    (add-hook 'prog-mode-hook #'tempel-abbrev-mode))

  (when (file-directory-p (expand-file-name "site-lisp/tempel-collection" user-emacs-directory))
    (add-to-list 'load-path (expand-file-name "site-lisp/tempel-collection" user-emacs-directory)))

  (use-package tempel-collection)
#+end_src
** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-completion)
  ;;; config-completion.el ends here
#+end_src
* Shell
:PROPERTIES:
:header-args: :tangle ./modules/config-shell.el :mkdirp t
:END:
** header                                                         :noexport:
#+begin_src emacs-lisp +n
  ;;; config-shell --- `Emacs' various shell configuration file -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
** =eshell=                                                        :builtin:
#+begin_src emacs-lisp -n
  (use-package eshell
    :ensure nil
    :custom
    (eshell-history-size 10000)
    (eshell-hist-ignore-dups t)
    (eshell-buffer-maximum-lines 10000)
    (eshell-scroll-to-bottom-on-input t)
    (eshell-destroy-buffer-when-process-dies t)
    (eshell-prompt-regexp "^[^\)]*[\)] "))
#+end_src
** =eshell-syntax-highlighting=
#+begin_src emacs-lisp -n
  (use-package eshell-syntax-highlighting
    :ensure
    :config
    (eshell-syntax-highlighting-global-mode +1))
#+end_src
** =esh-autosuggest=
#+begin_src emacs-lisp -n
  (use-package esh-autosuggest
    :hook (eshell-mode . esh-autosuggest-mode)
    ;; If you have use-package-hook-name-suffix set to nil, uncomment and use the
    ;; line below instead:
    ;; :hook (eshell-mode-hook . esh-autosuggest-mode)
    :ensure t)
#+end_src
** =sh-script=                                                     :builtin:
#+begin_src emacs-lisp -n
  (use-package sh-script
    :mode ("\\.bats\\'" . sh-mode)
    :mode ("\\.\\(?:zunit\\|env\\)\\'" . sh-mode)
    :mode ("/bspwmrc\\'" . sh-mode)
    :hook (sh-mode-local-vars . lsp-deferred)
    :hook (sh-mode-local-vars . tree-sitter-mode)
    :config
    (with-eval-after-load 'lsp
      (add-hook 'sh-mode-hook #'lsp-deferred)
      (add-hook 'shell-mode-hook #'lsp-deferred)
      (add-hook 'sh-mode-local-vars-hook #'lsp-deferred))
    (with-eval-after-load 'rainbow-delimiters
      (add-hook 'sh-mode #'rainbow-delimiters-mode))
    ;; recognize function names with dashes in them
    (setq sh-indent-after-continuation 'always)
    (add-to-list 'sh-imenu-generic-expression
                 '(sh (nil "^\\s-*function\\s-+\\([[:alpha:]_-][[:alnum:]_-]*\\)\\s-*\\(?:()\\)?" 1)
                      (nil "^\\s-*\\([[:alpha:]_-][[:alnum:]_-]*\\)\\s-*()" 1)))
    (with-eval-after-load 'smartparens
      (sp-local-pair 'sh-mode "`" "`" :unless '(sp-point-before-word-p sp-point-before-same-p))))
#+end_src
** =vterm=
#+begin_src emacs-lisp -n
  (use-package vterm
    :ensure
    :demand t
    :commands vterm-mode
    :config
    (add-hook 'vterm-mode-hook
              (lambda ()
                (setq-local global-hl-line-mode nil)
                (setq-local hscroll-margin 0)))
    (setq vterm-kill-buffer-on-exit t))
#+end_src
** =multi-vterm=
#+begin_src emacs-lisp -n
  (use-package multi-vterm
    :ensure
    :after vterm)
#+end_src
** =vterm-toggle=
#+begin_src emacs-lisp -n
  (use-package vterm-toggle
    :ensure
    :after vterm
    :commands vterm-toggle
    :bind
    (:map vterm-mode-map
          ("C-<return>" . vterm-toggle-insert-cd))
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   ;;(display-buffer-reuse-window display-buffer-in-direction)
                   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                   ;;(direction . bottom)
                   (dedicated . t) ;dedicated is supported in emacs27
                   (reusable-frames . visible)
                   (window-height . 0.4))))
#+end_src
** =fish-mode=
#+begin_src emacs-lisp -n
  (use-package fish-mode
    :ensure
    :if (executable-find "fish")
    :defer t)
#+end_src
** =fish-completion=
#+begin_src emacs-lisp -n
  (use-package fish-completion
    :ensure
    :after fish-mode
    :config
    (setq fish-completion-fallback-on-bash-p t))
#+end_src
** =bash-completion=
#+begin_src emacs-lisp -n
  (use-package bash-completion
    :ensure
    :config
    (bash-completion-setup)
    :hook
    (shell-dynamic-complete-function bash-completion-dynamic-complete))
#+end_src
** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-shell)
  ;;; config-shell.el ends here
#+end_src
* Editing
:PROPERTIES:
:header-args: :tangle ./modules/config-editing.el :mkdirp t
:END:
** header                                                         :noexport:
#+begin_src emacs-lisp +n
  ;;; config-editing --- Editor configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code
#+end_src
** =smartparens=
I still have a mixed feeling for this package, but it still easier to configure than the builtin /electric-pair-mode/.
#+begin_src emacs-lisp -n
    ;;; smartparens
  (use-package smartparens
    :ensure
    :demand t
    :config
    (require 'smartparens-config)
    (show-smartparens-global-mode 1)
    (smartparens-global-mode 1)
    ;; Fix usage of ' in Lisp modes
    ;; THANKS: https://github.com/Fuco1/smartparens/issues/286#issuecomment-32324743
    ;; (eval) is used as a hack to quiet Flycheck errors about (sp-with-modes)
    (eval
     '(sp-with-modes sp-lisp-modes
        ;; disable ', it's the quote character!
        (sp-local-pair "'" nil :actions nil)
        ;; also only use the pseudo-quote inside strings where it serve as
        ;; hyperlink.
        (sp-local-pair "`" "'" :when '(sp-in-string-p sp-in-comment-p))
        (sp-local-pair "`" nil
                       :skip-match (lambda (ms mb me)
                                     (cond
                                      ((equal ms "'")
                                       (or (sp--org-skip-markup ms mb me)
                                           (not (sp-point-in-string-or-comment))))
                                      (t (not (sp-point-in-string-or-comment))))))))
    (sp-with-modes '(html-mode sgml-mode nxml-mode web-mode)
      (sp-local-pair "<" ">")))
#+end_src
** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-editing)
  ;;; config-editing.el ends here
#+end_src
* Project
:PROPERTIES:
:header-args: :tangle ./modules/config-project.el :mkdirp t
:END:
** header
#+begin_src emacs-lisp +n
  ;;; config-project --- project configuration file -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
** =magit=
#+begin_src emacs-lisp -n
  (use-package magit
    :ensure
    :demand t
    :config
    (evil-set-initial-state #'git-commit-mode 'insert)
    (with-eval-after-load 'general
      (+config/leader-go
        "g" 'magit-status))
    :custom
    (magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
    (magit-diff-refine-hunk 'all)
    (magit-log-arguments '("-n100" "--graph" "--decorate")))
#+end_src
** =projectile=
#+begin_src emacs-lisp -n
  (use-package projectile
    :ensure t
    :demand t
    :bind (([remap evil-jump-to-tag] . projectile-find-tag)
           ([remap find-tag] . projectile-find-tag))
    :hook (dired-before-readin . projectile-track-known-projects-find-file-hook)
    :custom
    (projectile-cache-file (expand-file-name ".projects" user-emacs-directory))
    (projectile-auto-discover nil)
    (projectile-enable-caching (not noninteractive))
    (projectile-globally-ignored-files '("DS_Store" "TAGS"))
    (projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o"))
    (projectile-kill-buffers-filter 'kill-only-files)
    (projectile-known-projects-file (expand-file-name ".projectile_projects.eld" user-emacs-directory))
    (projectile-ignored-projects '("~/"))
    (projectile-project-root-files-bottom-up
     (append '(".projectile" ".project" ".git")
             (when (executable-find "hg")
               '(".hg"))
             (when (executable-find "bzr")
               '(".bzr"))))
    (projectile-project-root-files-top-down-recurring '("Makefile"))
    (compilation-buffer-name-function #'projectile-compilation-buffer-name)
    (compilation-save-buffers-predicate #'projectile-current-project-buffer-p)
    (projectile-git-submodule-command nil)
    (projectile-indexing-method 'hybrid)
    :config
    (projectile-mode +1)
    (put 'projectile-git-submodule-command 'initial-value projectile-git-submodule-command)
    (with-eval-after-load 'general
      (+config/leader-key
        "SPC" 'projectile-find-file
        "p" '(:keymap projectile-command-map :package projectile :wk "projectile"))))
#+end_src
** =ripgrep=
#+begin_src emacs-lisp -n
  (use-package ripgrep
    :ensure
    :init
    (with-eval-after-load 'evil-collection
      (evil-collection-ripgrep-setup)))
#+end_src
** =diff-hl=
#+begin_src emacs-lisp -n
  (use-package diff-hl
    :ensure
    :hook (find-file . diff-hl-mode)
    :hook (vc-dir-mode . diff-hl-dir-mode)
    :hook (dired-mode . diff-hl-dired-mode)
    :hook (diff-hl-mode . diff-hl-flydiff-mode)
    :hook (diff-hl-mode . diff-hl-show-hunk-mouse-mode)
    :hook (magit-pre-refresh-hook . diff-hl-magit-pre-refresh)
    :hook (magit-post-refresh-hook . diff-hl-magit-post-refresh)
    :init
    (global-diff-hl-mode)
    :custom
    (vc-git-diff-switches '("--histogram")
                          diff-hl-flydiff-delay 0.5
                          diff-hl-show-staged-changes nil)
    :config
    (when (featurep 'flycheck)
      (setq flycheck-indication-mode 'right-fringe)))
#+end_src
** =perspective=
#+begin_src emacs-lisp -n
  (use-package perspective
    :ensure
    :config
    (setq persp-initial-frame-name "Main"
          persp-suppress-no-prefix-key-warning t)
    (if (featurep 'no-littering)
        (setq persp-state-default-file (expand-file-name ".perspective-state" no-littering-var-directory))
      (setq persp-state-default-file (expand-file-name ".perspective-state" user-emacs-directory)))
    (global-set-key [remap switch-to-buffer] #'persp-switch-to-buffer*)
    (when (featurep 'consult)
      (require 'consult)
      (unless (boundp 'persp-consult-source)
        (defvar persp-consult-source
          (list :name     "Perspective"
                :narrow   ?s
                :category 'buffer
                :state    #'consult--buffer-state
                :history  'buffer-name-history
                :default  t
                :items
                #'(lambda () (consult--buffer-query :sort 'visibility
                                                    :predicate '(lambda (buf) (persp-is-current-buffer buf t))
                                                    :as #'buffer-name)))))
      (consult-customize consult--source-buffer :hidden t :default nil)
      (add-to-list 'consult-buffer-sources persp-consult-source))
    (with-eval-after-load 'general
      (general-def
        :keymaps 'perspective-map
        "P" 'projectile-persp-switch-project)
      (+config/leader-key
        "TAB" '(:keymap perspective-map
                        :package perspective
                        :which-key "perspective")
        "TAB TAB" '(persp-switch-last :wk "switch to last perspective")
        "C-x" '(persp-switch-to-scratch-buffer :wk "switch to scratch buffer")))
    :init
    (customize-set-variable 'persp-mode-prefix-key (kbd "C-c TAB"))
    (unless (equal persp-mode t)
      (persp-mode 1))
    :bind (([remap switch-to-buffer] . persp-switch-to-buffer*)
           ([remap kill-buffer] . persp-kill-buffer*))
    :hook (kill-emacs . persp-state-save))
#+end_src
** =persp-projectile=
#+begin_src emacs-lisp -n
  (use-package persp-projectile
    :ensure t
    :after perspective
    :commands projectile-persp-switch-project)
#+end_src
** =git-link=
#+begin_src emacs-lisp -n
  (use-package git-link
    :demand
    :ensure
    :commands (git-link git-link-commit git-link-homepage)
    :config
    (with-eval-after-load 'general
      (+config/leader-go
        "G" '(:ignore t :wk "git")
        "Gl" 'git-link
        "Gh" 'git-link-homepage
        "Gc" 'git-link-commit)))
#+end_src
** =git-messenger=
#+begin_src emacs-lisp -n
  (use-package git-messenger
    :ensure
    :config
    (with-eval-after-load 'general
      (+config/leader-go
        "Gm" 'git-messenger:popup-message))
    :custom
    ;; Enable magit-show-commit instead of pop-to-buffer
    (git-messenger:use-magit-popup t)
    (git-messenger:show-detail t))
#+end_src
** =git-timemachine=
#+begin_src emacs-lisp -n
  (use-package git-timemachine
    :ensure
    :after magit
    :config
    (with-eval-after-load 'general
      (+config/leader-go
        "Gt" 'git-timemachine-toggle)))
#+end_src
** =magit-todos=
#+begin_src emacs-lisp -n
  (use-package magit-todos
    :ensure
    :after magit
    :hook (magit-mode . magit-todos-mode)
    :custom
    (magit-todos-group-by
     '(magit-todos-item-first-path-component magit-todos-item-keyword magit-todos-item-filename)))
#+end_src
** =forge=
#+begin_src emacs-lisp -n
  (use-package forge
    :after magit
    :defer t
    :bind ((:map forge-issue-section-map
                 ("C-c C-v" . forge-browse-topic))
           (:map forge-pullreq-section-map
                 ("C-c C-v" . forge-browse-topic)))
    :custom
    (forge-add-default-bindings nil))
#+end_src
** =org-project-capture=
#+begin_src emacs-lisp -n
  (use-package org-project-capture
    :bind (("C-c n p" . org-project-capture-project-todo-completing-read))
    :ensure t
    :config
    (progn
      (setq org-project-capture-backend
            (make-instance 'org-project-capture-projectile-backend))  ; Replace with your backend of choice
      (setq org-project-capture-projects-file (expand-file-name "projects.org" org-directory))
      (org-project-capture-single-file)))
#+end_src
** =lsp=
#+begin_src emacs-lisp -n
  (use-package lsp-mode
    :ensure
    :diminish (lsp-lens-mode lsp-mode)
    :commands lsp lsp-deferred
    :init
    (setq lsp-keymap-prefix "C-c C-l")
    (defun my/orderless-dispatch-flex-first (_pattern index _total)
      (and (eq index 0) 'orderless-flex))
    (defun my/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless)))
    (add-hook 'orderless-style-dispatchers #'my/orderless-dispatch-flex-first nil 'local)
    (when (featurep 'cape)
      (setq-local completion-at-point-functions (list (cape-capf-buster #'lsp-completion-at-point))))
    :hook
    (lsp-mode . lsp-enable-which-key-integration)
    (lsp-completion-mode . my/lsp-mode-setup-completion)
    :config
    (setq lsp-toml-command
          (if (file-exists-p (expand-file-name ".cargo/bin/taplo" "~"))
              (expand-file-name ".cargo/bin/taplo" "~")
            "taplo")
          lsp-rust-rls-server-command "rls"
          lsp-eldoc-render-all t
          lsp-enable-snippet nil
          lsp-enable-indentation nil
          lsp-prefer-flymake nil
          lsp-keep-workspace-alive nil
          lsp-modeline-code-actions-segments '(count icon name))
    :custom
    (lsp-completion-provider :none)
    (when (featurep 'exwm)
      (advice-add #'corfu--make-frame :around
                  (defun +corfu--make-frame-a (oldfun &rest args)
                    (cl-letf (((symbol-function #'frame-parent)
                               (lambda (frame)
                                 (or (frame-parameter frame 'parent-frame)
                                     exwm-workspace--current))))
                      (apply oldfun args))
                    (when exwm--connection
                      (set-frame-parameter corfu--frame 'parent-frame nil))))

      (advice-add #'corfu--popup-redirect-focus :override
                  (defun +corfu--popup-redirect-focus-a ()
                    (redirect-frame-focus corfu--frame
                                          (or (frame-parent corfu--frame)
                                              exwm-workspace--current)))))
    (defun my/ignore-elisp-keywords (cand)
      (or (not (keywordp cand))
          (eq (char-after (car completion-in-region--data)) ?:)))
    (defun my/setup-elisp ()
      (setq-local completion-at-point-functions
                  `(,(cape-super-capf
                      (cape-capf-predicate
                       #'elisp-completion-at-point
                       #'my/ignore-elisp-keywords)
                      #'cape-dabbrev)
                    cape-file)
                  cape-dabbrev-min-length 5))
    (add-hook 'emacs-lisp-mode-hook #'my/setup-elisp))
#+end_src
** =lsp-ui=
#+begin_src emacs-lisp -n
  (use-package lsp-ui
    :ensure
    :demand t
    :hook (lsp-mode . lsp-ui-mode)
    :init
    (setq lsp-ui-sideline-enable t
          lsp-ui-sideline-update-mode 'line
          lsp-ui-sideline-show-code-actions t
          lsp-ui-sideline-show-hover t
          lsp-ui-doc-enable t
          lsp-ui-doc-include-signature t
          lsp-ui-doc-show-with-cursor t
          lsp-eldoc-enable-hover nil ; Disable eldoc displays in minibuffer
          lsp-ui-doc-position 'at-point
          lsp-ui-imenu-enable t
          lsp-ui-sideline-ignore-duplicate t
          lsp-ui-peek-enable t)
    :config
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
    (add-to-list 'lsp-language-id-configuration '(jinja2-mode . "jinja2") t)
    (add-to-list 'lsp-language-id-configuration '("\\.js2$" . "jinja2") t))
#+end_src
** =consult-lsp=
#+begin_src emacs-lisp -n
  (use-package consult-lsp
    :ensure
    :after consult lsp
    :bind
    (:map lsp-mode-map
          ([remap xref-find-apropos] . consult-lsp-symbols)))
#+end_src
** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-project)
  ;;; config-project.el ends here
#+end_src
* Org-mode
:PROPERTIES:
:header-args: :tangle ./modules/config-org.el :mkdirp t
:END:
** header
#+begin_src emacs-lisp -n
  ;;; config-org --- Org-mode configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
** Define =+config/org-directory= variable
#+begin_src emacs-lisp -n
  (when (file-directory-p (expand-file-name "Sync/org" (getenv "HOME")))
    (customize-set-variable '+config/org-directory (expand-file-name "Sync/org" (getenv "HOME"))))
#+end_src
** =org-mode= main package                                         :builtin:
#+begin_src emacs-lisp -n
  (use-package org
    :commands org-tempo
    :preface
    (if (not +config/org-directory)
        (cond
         ((file-directory-p
           (expand-file-name "Dropbox/org" (getenv "HOME")))
          (setq org-directory (expand-file-name "Dropbox/org" (getenv "HOME"))))
         ((file-directory-p
           (expand-file-name "Sync/org" (getenv "HOME")))
          (setq org-directory (expand-file-name "Sync/org" (getenv "HOME"))))
         ((file-directory-p
           (expand-file-name "Documents/google-drive/org" (getenv "HOME")))
          (setq org-directory (expand-file-name "Documents/google-drive/org" (getenv "HOME")))))
      (customize-set-variable 'org-directory +config/org-directory))
    :hook ((org-mode . org-indent-mode)
           (org-mode . +config/org-prettify-symbols))
    :config
    (when(file-directory-p (expand-file-name "braindump/org" org-directory))
      (customize-set-variable '+config/org-roam-directory
                              (expand-file-name "braindump/org" org-directory)))
    (when (file-directory-p (expand-file-name "alexforsale.github.io" org-directory))
      (customize-set-variable '+config/blog-directory
                              (expand-file-name "alexforsale.github.io" org-directory)))
    (modify-syntax-entry ?= "$" org-mode-syntax-table)
    (modify-syntax-entry ?~ "$" org-mode-syntax-table)
    (modify-syntax-entry ?_ "$" org-mode-syntax-table)
    (modify-syntax-entry ?+ "$" org-mode-syntax-table)
    (modify-syntax-entry ?/ "$" org-mode-syntax-table)
    (modify-syntax-entry ?* "$" org-mode-syntax-table)
    (add-to-list 'org-modules 'org-tempo t)
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("lisp" . "src lisp"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("go" . "src go"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("js" . "src js"))
    (add-to-list 'org-structure-template-alist '("json" . "src json"))
    (add-to-list 'org-structure-template-alist '("n" . "note"))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (awk . t)
       (C . t)
       (css . t)
       (calc . t)
       (screen . t)
       (dot . t )
       (haskell . t)
       (java . t)
       (js . t)
       (latex . t)
       (lisp . t)
       (lua . t)
       (org . t)
       (perl . t)
       (python .t)
       (ruby . t)
       (shell . t)
       (sed . t)
       (scheme . t)
       (sql . t)
       (sqlite . t)))
    (add-to-list 'org-babel-tangle-lang-exts '("js" . "js"))
    (defun +config/org-prettify-symbols ()
      (push '("[ ]" . "☐") prettify-symbols-alist)
      (push '("[X]" . "☑") prettify-symbols-alist)
      (prettify-symbols-mode))
    :custom
    (org-replace-disputed-keys t)
    (org-indirect-buffer-display 'current-window)
    (org-enforce-todo-dependencies t)
    (org-fontify-whole-heading-line t)
    (org-return-follows-link t)
    (org-mouse-1-follows-link t)
    (org-image-actual-width nil)
    (org-adapt-indentation nil)
    (org-startup-indented t)
    (org-link-descriptive nil)
    (org-log-done 'time)
    (org-log-refile 'time)
    (org-log-redeadline 'time)
    (org-log-reschedule 'time)
    (org-log-into-drawer t)
    (org-clone-delete-id t)
    (org-default-notes-file (expand-file-name "notes.org" org-directory))
    (org-pretty-entities t)
    (org-use-sub-superscripts '{})
    (org-use-property-inheritance t)
    (org-todo-keywords
     '((sequence
        "TODO(t!)"  ; A task that needs doing & is ready to do
        "NEXT(n!)"  ; Tasks that can be delayed
        "PROJ(p!)"  ; A project, which usually contains other tasks
        "PROG(g!)"  ; A task that is in progress
        "WAIT(w!)"  ; Something external is holding up this task
        "HOLD(h!)"  ; This task is paused/on hold because of me
        "IDEA(i!)"  ; An unconfirmed and unapproved task or notion
        "|"
        "DONE(d!)"  ; Task successfully completed
        "DELEGATED(l!)" ; Task is delegated
        "KILL(k!)") ; Task was cancelled, aborted or is no longer applicable
       ))
    (org-todo-keyword-faces
     '(("PROJ" . (:foreground "cyan" :weight bold))
       ("WAIT" . (:foreground "yellow" :weight bold))
       ("IDEA" . (:foreground "magenta" :weight bold))
       ("DELEGATED" . "blue")
       ("KILL" . "green")))
    (org-todo-state-tags-triggers
     '(("KILL" ("killed" . t) ("Archives" . t))
       ("WAIT" ("wait" . t))
       ("HOLD" ("wait") ("hold" . t))
       (done ("wait") ("hold"))
       ("PROJ" ("project" . t))
       ("TODO" ("wait") ("killed") ("hold"))
       ("NEXT" ("wait") ("killed") ("hold"))
       ("PROG" ("wait") ("killed") ("hold"))
       ("STRT" ("wait") ("killed") ("hold"))
       ("DONE" ("wait") ("killed") ("hold")))))
#+end_src
** =org-src=                                                       :builtin:
#+begin_src emacs-lisp -n
  (use-package org-src
    :hook (org-src-mode . (lambda () (outline-minor-mode -1)))
    :custom
    (org-src-preserve-indentation nil))
#+end_src
** =org-faces=                                                     :builtin:
#+begin_src emacs-lisp -n
  (use-package org-faces
    :custom
    (org-fontify-quote-and-verse-blocks t))
#+end_src
** =org-compat=                                                    :builtin:
#+begin_src emacs-lisp -n
  (use-package org-compat
    :custom
    (org-imenu-depth 6))
#+end_src
** =org-archive=                                                   :builtin:
#+begin_src emacs-lisp -n
  (use-package org-archive
    :after org
    :custom
    (org-archive-tag "archive")
    (org-archive-subtree-save-file-p t)
    (org-archive-mark-done t)
    (org-archive-reversed-order t)
    (org-archive-location (concat (expand-file-name "archives.org" org-directory) "::datetree/* Finished Tasks")))
#+end_src
** =org-capture=                                                   :builtin:
#+begin_src emacs-lisp -n
  (use-package org-capture
    :after org
    :config
    (org-capture-put :kill-buffer t)
    (setq org-capture-templates ;; this is the default from `doom'.
          `(("i" "Inbox - Goes Here first!" entry
             (file+headline ,(expand-file-name "inbox.org" org-directory) "Inbox")
             "** %?\n%i\n%a" :prepend t)
            ("l" "Links" entry
             (file+headline ,(expand-file-name "links.org" org-directory) "Links")))))
#+end_src
** =org-refile=                                                    :builtin:
#+begin_src emacs-lisp -n
  (use-package org-refile
    :after org
    :hook (org-after-refile-insert . save-buffer)
    :custom
    (org-refile-targets
     `((,(expand-file-name "archives.org" org-directory) :maxlevel . 1)
       (,(expand-file-name "notes.org" org-directory) :maxlevel . 1)
       (,(expand-file-name "projects.org" org-directory) :maxlevel . 1)
       (,(expand-file-name "todo.org" org-directory) :maxlevel . 1)))
    (org-refile-use-outline-path 'file)
    (org-outline-path-complete-in-steps nil))
#+end_src
** =org-num=                                                       :builtin:
#+begin_src emacs-lisp -n
  (use-package org-num
    :after org
    :custom
    (org-num-face '(:inherit org-special-keyword :underline nil :weight bold))
    (org-num-skip-tags '("noexport" "nonum")))
#+end_src
** =org-fold=                                                      :builtin:
#+begin_src emacs-lisp -n
  (use-package org-fold
    :after org org-contrib
    :custom
    (org-catch-invisible-edits 'smart))
#+end_src
** =org-id=                                                        :builtin:
#+begin_src emacs-lisp -n
  (use-package org-id
    :after org
    :custom
    (org-id-locations-file-relative t)
    (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))
#+end_src
=org-crypt=
#+begin_src emacs-lisp -n
  (use-package org-crypt ; built-in
    :after org
    :commands org-encrypt-entries org-encrypt-entry org-decrypt-entries org-decrypt-entry
    ;;:hook (org-reveal-start . org-decrypt-entry)
    :preface
    ;; org-crypt falls back to CRYPTKEY property then `epa-file-encrypt-to', which
    ;; is a better default than the empty string `org-crypt-key' defaults to.
    (defvar org-crypt-key nil)
    (with-eval-after-load 'org
      (add-to-list 'org-tags-exclude-from-inheritance "crypt")))
#+end_src
** =org-attach=                                                    :builtin:
#+begin_src emacs-lisp -n
  (use-package org-attach
    :after org
    :commands (org-attach-new
               org-attach-open
               org-attach-open-in-emacs
               org-attach-reveal-in-emacs
               org-attach-url
               org-attach-set-directory
               org-attach-sync)
    :config
    (unless org-attach-id-dir
      (setq-default org-attach-id-dir (expand-file-name ".attach/" org-directory)))
    (with-eval-after-load 'projectile
      (add-to-list 'projectile-globally-ignored-directories org-attach-id-dir))
    :custom
    (org-attach-auto-tag nil))
#+end_src
** =org-clock=                                                     :builtin:
#+begin_src emacs-lisp -n
  (use-package org-clock
    :after org
    :commands org-clock-save
    :hook (kill-emacs . org-clock-save)
    :custom
    (org-persist 'history)
    (org-clock-in-resume t)
    (org-clock-out-remove-zero-time-clocks t)
    (org-clock-history-length 20)
    (org-show-notification-handler "notify-send")
    (org-agenda-skip-scheduled-if-deadline-is-shown t)
    :config
    (org-clock-persistence-insinuate))
#+end_src
** =org-agenda=                                                    :builtin:
#+begin_src emacs-lisp -n
  (use-package org-agenda
    :after org
    :custom
    (org-agenda-files (list (concat org-directory "/")))
    (org-agenda-file-regexp "\\`[^.].*\\.org\\|[0-9]+$\\'")
    (org-agenda-include-inactive-timestamps t)
    (org-agenda-window-setup 'only-window)
    (org-stuck-projects '("+{project*}-killed-Archives/-DONE-KILL-DELEGATED"
                          ("TODO" "NEXT" "IDEA" "PROG")
                          nil ""))
    :config
    (with-eval-after-load 'evil
      (evil-set-initial-state #'org-agenda-mode 'normal))
    (setq org-agenda-custom-commands
          `(("a" "All Agenda"
             ((tags-todo "+followup"
                         ((org-agenda-block-separator nil)
                          (org-agenda-overriding-header "\nNeeds Followup\n")))
              (tags-todo "+reading"
                         ((org-agenda-block-separator nil)
                          (org-agenda-overriding-header "\nReading List\n")))
              (agenda ""
                      ((org-agenda-span 1)
                       (org-agenda-block-separator nil)
                       (org-deadline-warning-days 0)
                       (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                       (org-agenda-start-on-weekday 1)
                       (org-scheduled-past-days 0)
                       (org-agenda-overriding-header "\nToday\n")))
              (agenda ""
                      ((org-agenda-block-separator nil)
                       (org-agenda-start-day "+1d")
                       (org-agenda-overriding-header "\nAll Agendas\n")))))
            ("w" . "Work")
            ("wa" "All Work Agenda"
             ((tags-todo "+followup"
                         ((org-agenda-block-separator nil)
                          (org-agenda-overriding-header "\nNeeds Followup\n")))
              (tags-todo "+reading"
                         ((org-agenda-block-separator nil)
                          (org-agenda-overriding-header "\nReading List\n")))
              (agenda ""
                      ((org-agenda-span 1)
                       (org-agenda-block-separator nil)
                       (org-deadline-warning-days 0)
                       (org-scheduled-past-days 0)
                       (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                       (org-agenda-format-date "%A %-e %B %Y")
                       (org-agenda-start-on-weekday 1)
                       (org-agenda-overriding-header "\nToday's Work\n")))
              (agenda ""
                      ((org-agenda-start-on-weekday nil)
                       (org-agenda-start-day "+1d")
                       (org-agenda-span 3)
                       (org-deadline-warning-days 0)
                       (org-agenda-block-separator nil)
                       (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                       (org-agenda-overriding-header "\nNext three days\n")))
              (agenda ""
                      ((org-agenda-time-grid nil)
                       (org-agenda-start-day "+4d")
                       (org-agenda-span 14)
                       (org-agenda-show-all-dates nil)
                       (org-deadline-warning-days 0)
                       (org-agenda-block-separator nil)
                       (org-agenda-entry-types '(:deadline))
                       (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                       (org-agenda-overriding-header "\nUpcoming deadlines\n"))))
             ((org-agenda-tag-filter-preset '("+work" "-personal"))))
            ("h" . "Personal")
            ("ha" "Personal Agenda"
             ((tags-todo "+followup"
                         ((org-agenda-block-separator nil)
                          (org-agenda-overriding-header "\nNeeds Followup\n")))
              (tags-todo "+reading"
                         ((org-agenda-block-separator nil)
                          (org-agenda-overriding-header "\nReading List\n")))
              (agenda ""
                      ((org-agenda-block-separator nil)
                       (org-agenda-overriding-header "\nPersonal Agenda\n")))
              (alltodo ""))
             ((org-agenda-tag-filter-preset '("+personal" "-work"))))
            ("p" . "Projects")
            ("pa" "All Projects"
             ((tags-todo "+{project*}+TODO=\"PROJ\""
                         ((org-agenda-block-separator nil)
                          (org-agenda-overriding-header "\nAll Projects\n")))))
            ("pp" "Personal Projects"
             ((tags-todo "+{project*}+personal+TODO=\"PROJ\""
                         ((org-agenda-block-separator nil)
                          (org-agenda-overriding-header "\nPersonal Projects\n")))))
            ("ps" "Stuck Projects"
             ((stuck ""
                     ((org-agenda-block-separator nil)
                      (org-agenda-overriding-header "\nStuck Projects\n"))))))))
#+end_src
** =org-timer=                                                     :builtin:
#+begin_src emacs-lisp -n
  (use-package org-timer
    :config
    (setq org-timer-format "Timer :: %s"))
#+end_src
=org-eldoc=
#+begin_src emacs-lisp -n
  (use-package org-eldoc
    :after org org-contrib
    :config
    (puthash "org" #'ignore org-eldoc-local-functions-cache)
    (puthash "plantuml" #'ignore org-eldoc-local-functions-cache)
    (puthash "python" #'python-eldoc-function org-eldoc-local-functions-cache)
    :custom
    (org-eldoc-breadcrumb-separator " → "))
#+end_src
** =org-contrib=
#+begin_src emacs-lisp -n
  (use-package org-contrib
    :ensure t
    :after org)
#+end_src
** =org-superstar=
#+begin_src emacs-lisp -n
  (use-package org-superstar
    :ensure
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-leading-bullet ?\s)
    (org-superstar-leading-fallback ?\s)
    (org-hide-leading-stars nil)
    (org-superstar-todo-bullet-alist
     '(("TODO" . 9744)
       ("[ ]"  . 9744)
       ("DONE" . 9745)
       ("[X]"  . 9745))))
#+end_src
** =org-fancy-priority=
#+begin_src emacs-lisp -n
  (use-package org-fancy-priorities ; priority icons
    :ensure
    :hook (org-mode . org-fancy-priorities-mode)
    :hook (org-agenda-mode . org-fancy-priorities-mode)
    :custom
    (org-fancy-priorities-list '("⚑" "⬆" "■")))
#+end_src
** =toc-org=
#+begin_src emacs-lisp -n
  (use-package toc-org
    :ensure
    :hook ((org-mode markdown-mode) . toc-org-mode)
    :custom
    (toc-org-hrefify-default "gh"))
#+end_src
** =ox-pandoc=
#+begin_src emacs-lisp -n
  (use-package ox-pandoc
    :ensure
    :if (executable-find "pandoc")
    :after ox
    :init
    (add-to-list 'org-export-backends 'pandoc)
    :custom
    (org-pandoc-options
     '((standalone . t)
       (mathjax . t)
       (variable . "revealjs-url=https://revealjs.com"))))
#+end_src
** =deft=
#+begin_src emacs-lisp -n
  (use-package deft
    :ensure
    :after org-roam
    :custom
    (deft-directory org-roam-directory)
    (deft-default-extension "org")
    (deft-recursive t)
    (deft-use-filename-as-title t)
    (deft-file-naming-rules
     '((noslash . "-")
       (nospace . "-")
       (case-fn . downcase)))
    :config
    (add-to-list 'deft-extensions "tex")
    (add-hook 'deft-mode-hook #'evil-normalize-keymaps)
    (evil-set-initial-state #'deft-mode 'insert))
#+end_src
** =org-pdftools=
#+begin_src emacs-lisp -n
  (use-package org-pdftools
    :ensure
    :hook (org-mode . org-pdftools-setup-link)
    :commands org-pdftools-export)
#+end_src
** =org-noter=
#+begin_src emacs-lisp -n
  (use-package org-noter
    :ensure
    :after org-pdftools
    :custom
    (org-noter-auto-save-last-location t)
    (org-noter-separate-notes-from-heading t)
    :config
    (require 'org-noter-pdftools))
#+end_src
** =org-noter-pdftools=
#+begin_src emacs-lisp -n
  (use-package org-noter-pdftools
    :ensure
    :after org-noter
    :config
    ;; Add a function to ensure precise note is inserted
    (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
      (interactive "P")
      (org-noter--with-valid-session
       (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                     (not org-noter-insert-note-no-questions)
                                                   org-noter-insert-note-no-questions))
             (org-pdftools-use-isearch-link t)
             (org-pdftools-use-freepointer-annot t))
         (org-noter-insert-note (org-noter--get-precise-info)))))
    ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
    (defun org-noter-set-start-location (&optional arg)
      "When opening a session with this document, go to the current location.
      With a prefix ARG, remove start location."
      (interactive "P")
      (org-noter--with-valid-session
       (let ((inhibit-read-only t)
             (ast (org-noter--parse-root))
             (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
         (with-current-buffer (org-noter--session-notes-buffer session)
           (org-with-wide-buffer
            (goto-char (org-element-property :begin ast))
            (if arg
                (org-entry-delete nil org-noter-property-note-location)
              (org-entry-put nil org-noter-property-note-location
                             (org-noter--pretty-print-location location))))))))
    (with-eval-after-load 'pdf-annot
      (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src
** =ox-gfm=
#+begin_src emacs-lisp -n
  (use-package ox-gfm
    :ensure
    :after org)
#+end_src
** =org-download=
#+begin_src emacs-lisp -n
  (use-package org-download
    :ensure
    :after org
    :hook (dired-mode . org-download-enable)
    :commands
    org-download-dnd
    org-download-yank
    org-download-screenshot
    org-download-clipboard
    org-download-dnd-base64
    :custom
    (org-download-method 'directory)
    (org-download-timestamp "_%Y%m%d_%H%M%S")
    (org-download-screenshot-method (cond ((executable-find "maim")  "maim -s %s")
                                          ((executable-find "scrot") "scrot -s %s")
                                          ((executable-find "gnome-screenshot") "gnome-screenshot -a -f %s")))
    (org-download-heading-lvl nil)
    (org-download-abbreviate-filename-function
     (lambda (path)
       (if (file-in-directory-p path org-download-image-dir)
           (file-relative-name path org-download-image-dir)
         path)))
    :config
    (unless org-download-image-dir
      (setq org-download-image-dir org-attach-id-dir)))
#+end_src
** =org-cliplink=
#+begin_src emacs-lisp -n
  (use-package org-cliplink
    :ensure
    :after org
    :demand t
    :bind ("C-x p i" . org-cliplink)
    :config
    (require 'org-capture)
    (add-to-list 'org-capture-templates
                 `("c" "Cliplink capture task" entry
                   (file+olp ,(expand-file-name "links.org" org-directory) "Cliplink")
                   "* %? %(org-cliplink-capture)\n\n SCHEDULED: %t\n"
                   :empty-lines 1) t))
#+end_src
** =hugo= function: start server
#+begin_src emacs-lisp -n
  (defun +config/start-hugo-server (args)
    "Start hugo server in `+config/blog-dir'."
    (interactive (list (transient-args '+config/transient-hugo-server)))
    (if (not (executable-find "hugo"))
        (message "hugo executable not found")
      (let ((default-directory +config/blog-directory)
            (command "hugo server"))
        (async-shell-command (mapconcat #'identity `(,command ,@args) " ") "*hugo*" "*hugo-error*"))))
#+end_src
** =hugo= function: create new blog post
#+begin_src emacs-lisp -n
  (defun +config/create-new-blog-post ()
    "Create new blog post path."
    (interactive)
    (let ((name (read-string "Filename: ")))
      (concat +config/blog-directory "/content-org/" (format "%s" name) "/" (format "%s.org" name))))
#+end_src
** Custom =capture-template= for =hugo= blog
#+begin_src emacs-lisp -n
  (merge-list-to-list 'org-capture-templates
                      `(("b" "(b)log post" plain
                         (file +config/create-new-blog-post)
                         "\
      ,#+options: ':nil -:nil ^:{} num:nil toc:nil
      ,#+author: %n
      ,#+creator: Emacs %(eval emacs-version) (Org mode %(eval org-version) + ox-hugo)
      ,#+hugo_section: posts
      ,#+hugo_base_dir: ../../
      ,#+date: %t
      ,#+title: %^{title}
      ,#+description: %^{description}
      ,#+hugo_draft: true
      ,#+hugo_tags: %^{tags}
      ,#+hugo_categories: %^{categories}
      ,#+hugo_auto_set_lastmod: t
      ,#+startup: inlineimages

      ,* %?
      " :unnarrowed t :jump-to-captured t)))
#+end_src
** =transient=
#+begin_src emacs-lisp -n
  (use-package transient
    :config
    (transient-define-prefix +config/transient-hugo-server ()
      "Run hugo server with `transient'."
      :man-page "hugo-server"
      ["Options"
       ("q" "quit" transient-quit-all)
       ("-D" "Build drafts" "--buildDrafts")
       ("-E" "Build expired" "--buildExpired")
       ("-F" "Build future" "--buildFuture")
       ("-d" "Debug" "--debug")
       ("-B" "Disable build errors on browser" "--disableBrowserError")
       ("-c" "Clean destination dir" "--cleanDestinationDir")
       ("-e" "Enable Git info" "--enableGitInfo")
       ("-F" "enable full re-renders on changes" "--disableFastRender")
       ("-f" "Force sync static files" "--forceSyncStatic")
       ("-g" "enable to run some cleanup tasks" "--gc")
       ("-m" "Minify any supported output format" "--minify")
       ("-C" "No chmod" "--noChmod")
       ("-T" "Don't sync modification time of files" "--noTimes")
       ("-I" "Print missing translation" "--printI18nWarnings")
       ("-M" "Print memory usage" "--printMemoryUsage")
       ("-P" "Print warning on duplicate target path" "--printPathWarnings")
       ("-q" "Quiet" "--quiet")
       ("-v" "Verbose" "--verbose")
       ("-w" "Watch filesystem for changes" "--watch")]
      ["Action"
       ("s" "hugo server" +config/start-hugo-server)]))

  (defun +config/ox-hugo-transient-keybinding ()
    (+config/local-leader
      :keymaps 'org-mode-map
      "h" '(:ignore t :wk "hugo")
      "hs" '+config/transient-hugo-server))
#+end_src
** =ox-hugo=
#+begin_src emacs-lisp -n
  (use-package ox-hugo
    :ensure
    :hook (org-hugo-auto-export-mode . +config/ox-hugo-transient-keybinding))
#+end_src
** =org-roam=
#+begin_src emacs-lisp -n
  (use-package org-roam
    :ensure
    :custom
    (org-roam-completion-everywhere t)
    :config
    (if (not +config/org-roam-directory)
        (customize-set-variable 'org-roam-directory (expand-file-name "roam" org-directory))
      (customize-set-variable 'org-roam-directory +config/org-roam-directory))
    (org-roam-db-autosync-mode)
    (add-to-list 'display-buffer-alist
                 '("\\*org-roam\\*"
                   (display-buffer-in-direction)
                   (direction . right)
                   (window-width . 0.33)
                   (window-height . fit-window-to-buffer)))
    (unless +config/org-roam-directory
      (setq org-roam-db-location
            (expand-file-name "org-roam.db"
                              (or (getenv "XDG_DATA_HOME")
                                  (expand-file-name ".local/share"
                                                    (getenv "HOME"))))))
    (when +config/org-roam-directory
      (setq org-roam-capture-templates
            `(("o" "others" plain "%?"
               :target
               (file+head ,(expand-file-name "%<%Y%m%d%H%M%S>-${slug}.org" org-roam-directory) "
      ,#+title: ${title}
      ,#+author: %n
      ,#+description: %^{description}
      ,#+date: %T
      ,#+hugo_base_dir: ..
      ,#+hugo_section: posts
      ,#+hugo_categories: others
      ,#+hugo_tags: %^{tag}
      ")
               :unnarrowed t)
              ("t" "tech" plain "%?"
               :target
               (file+head ,(expand-file-name "%<%Y%m%d%H%M%S>-${slug}.org" org-roam-directory) "
      ,#+title: ${title}
      ,#+author: %n
      ,#+description: %^{description}
      ,#+date: %T
      ,#+hugo_base_dir: ..
      ,#+hugo_section: posts
      ,#+hugo_categories: tech
      ,#+hugo_tags: %^{tag}
      ")
               :unnarrowed t)
              ("p" "programming" plain "%?"
               :target
               (file+head ,(expand-file-name "%<%Y%m%d%H%M%S>-${slug}.org" org-roam-directory) "
      ,#+title: ${title}
      ,#+author: %n
      ,#+description: %^{description}
      ,#+date: %T
      ,#+hugo_base_dir: ..
      ,#+hugo_section: posts
      ,#+hugo_categories: programming
      ,#+hugo_tags: %^{tag}
      ")
               :unnarrowed t)
              )
            ))
    (setq org-roam-completion-everywhere t)
    (require 'org-roam-protocol)
    ;; TODO: implement `hugo' layouts for reference.
    (setq org-roam-capture-ref-templates
          `(("r" "ref" plain "%?" :target
             (file+head ,(expand-file-name "%<%Y%m%d%H%M%S>-${slug}.org" org-roam-directory) "
      ,#+title: ${title}
      ,#+author: %n
      ,#+description: %^{description}
      ,#+date: %T
      ,#+hugo_base_dir: ..
      ,#+hugo_section: posts
      ,#+hugo_categories: reference
      ,#+hugo_tags: %^{tag}
      ") :unnarrowed t)))
    (require 'org-roam-dailies)
    (setq org-roam-dailies-directory "daily/"
          org-roam-dailies-capture-templates
          '(("d" "default" entry "* %?" :target
             (file+head "%<%Y-%m-%d>.org" "
      ,#+title: %<%Y-%m-%d>
      ,#+author: %n
      ,#+description: %^{description}
      ,#+date: %T
      ,#+hugo_base_dir: ../..
      ,#+hugo_section: posts
      ,#+hugo_categories: daily
      ,#+hugo_tags: %^{tag}
      "))))
    (require 'org-roam-export)
    (org-roam-setup))
#+end_src
** =org-roam-ui=
#+begin_src emacs-lisp -n
  (use-package org-roam-ui
    :ensure
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start nil))
#+end_src
** =org-journal=
#+begin_src emacs-lisp -n
  (use-package org-journal
    :ensure
    :custom
    (org-icalendar-store-UID t)
    (org-icalendar-include-todo 'all)
    (org-journal-enable-agenda-integration t)
    (org-icalendar-combined-agenda-file (expand-file-name "org-journal.ics" org-directory))
    (org-journal-date-prefix "#+title: ")
    (org-journal-file-format "%Y-%m-%d.org")
    (org-journal-dir (expand-file-name "journal" org-directory))
    (org-journal-date-format "%A, %d %B %Y"))
#+end_src
** =org-ref=
#+begin_src emacs-lisp -n
  (use-package org-ref
    :ensure
    :config
    (let ((ref-dir (expand-file-name "bibliography" org-directory)))
      (setq bibtex-completion-bibliography `(,(expand-file-name "references.bib" ref-dir)
                                             ,(expand-file-name "dei.bib" ref-dir)
                                             ,(expand-file-name "master.bib" ref-dir)
                                             ,(expand-file-name "archive.bib" ref-dir))
            bibtex-completion-library-path '(,(expand-file-name "bibtex-pdfs/" ref-dir))
            bibtex-completion-notes-path (expand-file-name "notes/" ref-dir)
            bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"
            bibtex-completion-additional-search-fields '(keywords)
            bibtex-completion-display-formats
            '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
              (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
              (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
              (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
              (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))))
    (setq bibtex-completion-pdf-open-function
          (lambda (fpath)
            (call-process "open" nil 0 nil fpath))))
#+end_src
** =consult-bibtex=
#+begin_src emacs-lisp -n
  (when (file-directory-p (expand-file-name "site-lisp/consult-bibtex" user-emacs-directory))
    (add-to-list 'load-path (expand-file-name "site-lisp/consult-bibtex" user-emacs-directory)))

  (use-package consult-bibtex
    :config
    (with-eval-after-load 'embark
      (add-to-list 'embark-keymap-alist '(bibtex-completion . consult-bibtex-embark-map))))
#+end_src
** =consult-org-roam=
#+begin_src emacs-lisp -n
  (use-package consult-org-roam
    :ensure
    :after org-roam
    :init
    (require 'consult-org-roam)
    ;; Activate the minor mode
    (consult-org-roam-mode 1)
    :custom
    ;; Use `ripgrep' for searching with `consult-org-roam-search'
    (consult-org-roam-grep-func #'consult-ripgrep)
    ;; Configure a custom narrow key for `consult-buffer'
    (consult-org-roam-buffer-narrow-key ?r)
    ;; Display org-roam buffers right after non-org-roam buffers
    ;; in consult-buffer (and not down at the bottom)
    (consult-org-roam-buffer-after-buffers t)
    :config
    ;; Eventually suppress previewing for certain functions
    (consult-customize
     consult-org-roam-forward-links
     :preview-key "M-.")
    :bind
    ;; Define some convenient keybindings as an addition
    ("C-c n e" . consult-org-roam-file-find)
    ("C-c n b" . consult-org-roam-backlinks)
    ("C-c n B" . consult-org-roam-backlinks-recursive)
    ("C-c n l" . consult-org-roam-forward-links)
    ("C-c n r" . consult-org-roam-search))
#+end_src
** =ox-latex=
#+begin_src emacs-lisp -n
  (use-package ox-latex
    :config
    (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f")))
#+end_src
** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-org)
  ;;; config-org.el ends here
#+end_src
* Tools
:PROPERTIES:
:header-args: :tangle ./modules/config-tools.el :mkdirp t
:END:
** header                                                          :noexport:
#+begin_src emacs-lisp -n
  ;;; config-tools --- `Emacs' various tools -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
** =nov=
Useful for reading /epubs/.
#+begin_src emacs-lisp -n
  (use-package nov
    :ensure)
#+end_src
** =djvu=
#+begin_src emacs-lisp -n
  (use-package djvu
    :ensure)
#+end_src
** =pdf-tools=
#+begin_src emacs-lisp -n
  (use-package pdf-tools
    :ensure
    :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
    :hook ((pdf-tools-enabled . (lambda ()
                                  (display-line-numbers-mode -1))))
    :custom
    (pdf-view-use-scaling t)
    (pdf-view-use-imagemagick nil)
    (pdf-annot-activate-created-annotations t)
    (pdf-view-resize-factor 1.1)
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
    (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
    (add-hook 'pdf-view-mode-hook #'pdf-history-minor-mode)
    (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
    (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
    (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete))
#+end_src
** =khalel=
#+begin_src emacs-lisp -n
  (use-package khalel
    :ensure
    :if (executable-find "khal")
    :config
    (setq khalel-khal-command (executable-find "khal")
          khalel-vdirsyncer-command (executable-find "vdirsyncer")
          khalel-import-org-file (expand-file-name "calendar.org" org-directory)
          khalel-import-org-file-confirm-overwrite nil)
    (khalel-add-capture-template))
#+end_src
** =direnv=
#+begin_src emacs-lisp -n
  (use-package direnv
    :ensure
    :config
    (direnv-mode))
#+end_src
** =pass=
#+begin_src emacs-lisp -n
  (use-package password-store
    :ensure
    :config
    (setq password-store-password-length 12))

  (use-package password-store-otp
    :ensure
    :after password-store)

  (use-package pass
    :ensure)

  (use-package auth-source-pass
    :demand t
    :init
    (auth-source-pass-enable))
#+end_src
** =ement=
#+begin_src emacs-lisp -n
  (use-package ement
    :ensure
    :config
    (setf use-default-font-for-symbols nil)
    (set-fontset-font t 'unicode "Noto Emoji" nil 'append))
#+end_src
** pinentry
#+begin_src emacs-lisp -n
  (use-package pinentry
    :ensure
    :config
    (pinentry-start))
#+end_src
** =rg=
#+begin_src emacs-lisp -n
  (use-package rg
    :if (executable-find "rg")
    :ensure
    :defer t)

  (use-package ripgrep
    :ensure
    :init
    (with-eval-after-load 'evil-collection
      (evil-collection-ripgrep-setup)))
#+end_src
** =wgrep=
#+begin_src emacs-lisp -n
  (use-package wgrep
    :ensure
    :commands wgrep-change-to-wgrep-mode
    :config (setq wgrep-auto-save-buffer t))
#+end_src
** =elfeed=
#+begin_src emacs-lisp -n
  (use-package elfeed
    :ensure
    :commands elfeed
    :config
    (setq elfeed-search-filter "@2-week-ago "
          elfeed-show-entry-switch #'pop-to-buffer
          shr-max-image-proportion 0.8))
#+end_src
** =elfeed-org=
#+begin_src emacs-lisp -n
  (use-package elfeed-org
    :ensure
    :after org elfeed
    :preface
    (setq rmh-elfeed-org-files (list (expand-file-name "elfeed.org" org-directory)))
    :init
    (elfeed-org))
#+end_src
** =emms=                                                          :builtin:
#+begin_src emacs-lisp -n
  (use-package emms
    :defer t
    :config
    (emms-all)
    (emms-default-players)
    (emms-mpris-enable))
#+end_src
** =ws-butler=
#+begin_src emacs-lisp -n
  (use-package ws-butler
    :ensure
    :config
    (setq ws-butler-convert-leading-tabs-or-spaces t))
#+end_src
** =editorconfig=
#+begin_src emacs-lisp -n
  (use-package editorconfig
    :ensure
    :diminish
    :config
    (editorconfig-mode 1)
    (with-eval-after-load 'ws-butler
      (setq editorconfig-trim-whitespaces-mode
            'ws-butler-mode)))
#+end_src
** =pdfgrep=
#+begin_src emacs-lisp -n
  (use-package pdfgrep
    :ensure
    :after pdf-tools
    :config (pdfgrep-mode))
#+end_src
** =selected=
#+begin_src emacs-lisp -n
  (use-package selected
    :ensure
    :diminish selected-minor-mode
    :commands selected-minor-mode
    :init
    (selected-global-mode))
#+end_src
** =yasnippet=
#+begin_src emacs-lisp -n
  (use-package yasnippet
    :ensure
    :diminish yas-minor-mode
    :commands (yas-minor-mode-on
               yas-expand
               yas-expand-snippet
               yas-lookup-snippet
               yas-insert-snippet
               yas-new-snippet
               yas-visit-snippet-file
               yas-activate-extra-mode
               yas-deactivate-extra-mode
               yas-maybe-expand-abbrev-key-filter)
    :init
    (defvar yas-verbosity 2)
    :hook (prog-mode . yas-minor-mode)
    :config
    (when (file-directory-p (expand-file-name "snippets" user-emacs-directory))
      (add-to-list 'yas-snippet-dirs (expand-file-name "snippets" user-emacs-directory))))

  (use-package yasnippet-snippets
    :ensure)

  (use-package auto-yasnippet
    :ensure
    :after yasnippet)
#+end_src
** =lorem-ipsum=
#+begin_src emacs-lisp -n
  (use-package lorem-ipsum
    :ensure)
#+end_src
** footer                                                          :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-tools)
  ;;; config-tools.el ends here
#+end_src
* dired
:PROPERTIES:
:header-args: :tangle ./modules/config-dired.el :mkdirp t
:END:
** header                                                         :noexport:
#+begin_src emacs-lisp -n
  ;;; config-dired --- `dired' configuration file -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
** =dired=                                                         :builtin:
#+begin_src emacs-lisp -n
  (use-package dired
    :commands dired-jump
    :init
    (setq dired-dwim-target t ; guess a default target directory
          dired-hide-details-hide-symlink-targets nil ; don't hide symbolic link targets
          dired-auto-revert-buffer #'dired-buffer-stale-p ; revert stale only
          dired-recursive-copies 'always ; always copy recursively
          dired-recursive-deletes 'top ; ask only for top-level
          dired-create-destination-dirs 'ask
          dired-clean-confirm-killing-deleted-buffers nil))
#+end_src
** =image-dired=                                                   :builtin:
#+begin_src emacs-lisp -n
  (use-package image-dired
    :config
    (setq image-dired-thumb-size 150))
#+end_src
** =dired-x=                                                       :builtin:
#+begin_src emacs-lisp -n
  (use-package dired-x
    :hook (dired-mode . dired-omit-mode)
    :config
    (setq dired-omit-files
          (concat dired-omit-files
                  "\\|^\\.DS_Store\\'"
                  "\\|^\\.project\\(?:ile\\)?\\'"
                  "\\|^\\.\\(?:svn\\|git\\)\\'"
                  "\\|^\\.ccls-cache\\'"
                  "\\|\\(?:\\.js\\)?\\.meta\\'"
                  "\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'"))
    ;; Disable the prompt about whether I want to kill the Dired buffer for a
    ;; deleted directory. Of course I do!
    (setq dired-clean-confirm-killing-deleted-buffers nil)
    (let ((cmd "xdg-open"))
      (setq dired-guess-shell-alist-user
            `(("\\.\\(?:docx\\|pdf\\|djvu\\|eps\\)\\'" ,cmd)
              ("\\.\\(?:jpe?g\\|png\\|gif\\|xpm\\)\\'" ,cmd)
              ("\\.\\(?:xcf\\)\\'" ,cmd)
              ("\\.csv\\'" ,cmd)
              ("\\.tex\\'" ,cmd)
              ("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|rm\\|rmvb\\|ogv\\)\\(?:\\.part\\)?\\'" ,cmd)
              ("\\.\\(?:mp3\\|flac\\)\\'" ,cmd)
              ("\\.html?\\'" ,cmd)
              ("\\.md\\'" ,cmd)))))
#+end_src
** =fd-dired=
#+begin_src emacs-lisp -n
  (use-package fd-dired
    :ensure
    :if (executable-find "fd")
    :defer t
    :init
    (global-set-key [remap find-dired] #'fd-dired))
#+end_src
** =dired-git-info=
#+begin_src emacs-lisp -n
  (use-package dired-git-info
    :ensure
    ;; :hook
    ;; (dired-after-readin . dired-git-info-auto-enable)
    :config
    ;; (setq +dired--git-info-p (bound-and-true-p dired-git-info-mode))
    ;; (when +dired--git-info-p
    ;;   (dired-git-info-mode -1))
    (setq dgi-auto-hide-details-p nil))
#+end_src
** =dired-aux=                                                     :builtin:
#+begin_src emacs-lisp -n
  (use-package dired-aux
    :config
    (setq dired-create-destination-dirs 'ask
          dired-vc-rename-file t))
#+end_src
** =dired-rsync=
#+begin_src emacs-lisp -n
  (use-package dired-rsync
    :ensure)
#+end_src
** =diredfl=
#+begin_src emacs-lisp -n
  (use-package diredfl
    :ensure
    :hook (dired-mode . diredfl-global-mode))
#+end_src
** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-dired)
  ;;; config-dired.el ends here
#+end_src
* Treemacs
I sometimes need /treemacs/ when working on a large directory of files.
:PROPERTIES:
:header-args: :tangle ./modules/config-treemacs.el :mkdirp t
:END:
** header                                                         :noexport:
#+begin_src emacs-lisp -n
  ;;; config-treemacs --- treemacs configuration file -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
** =treemacs= main package
#+begin_src emacs-lisp -n
  (use-package treemacs
    :ensure
    :hook ((treemacs-mode . (lambda () (hs-minor-mode -1))))
    :config
    (setq treemacs-hide-gitignored-files-mode t
          treemacs-no-png-images t
          treemacs-silent-refresh t
          treemacs-sorting 'mod-time-desc
          treemacs-python-executable (executable-find "python3")
          treemacs-collapse-dirs (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay 0.5
          treemacs-directory-name-transformer #'identity
          treemacs-display-in-side-window t
          treemacs-eldoc-display 'simple
          treemacs-file-event-delay 2000
          treemacs-file-extension-regex treemacs-last-period-regex-value
          treemacs-file-follow-delay 0.2
          treemacs-file-name-transformer #'identity
          treemacs-follow-after-init t
          treemacs-expand-after-init t
          treemacs-find-workspace-method 'find-for-file-or-pick-first
          treemacs-git-command-pipe ""
          treemacs-goto-tag-strategy 'refetch-index
          treemacs-header-scroll-indicators '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory t
          treemacs-indentation 2
          treemacs-indentation-string " "
          treemacs-is-never-other-window nil
          treemacs-max-git-entries 5000
          treemacs-missing-project-action 'ask
          treemacs-move-forward-on-expand nil
          treemacs-no-delete-other-windows t
          treemacs-project-follow-cleanup nil
          treemacs-persist-file (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position 'left
          treemacs-read-string-input 'from-child-frame
          treemacs-recenter-distance 0.1
          treemacs-recenter-after-file-follow nil
          treemacs-recenter-after-tag-follow nil
          treemacs-recenter-after-project-jump 'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-litter-directories '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home nil
          treemacs-show-cursor nil
          treemacs-show-hidden-files t
          treemacs-silent-filewatch t
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes t
          treemacs-tag-follow-cleanup t
          treemacs-tag-follow-delay 1.5
          treemacs-text-scale nil
          treemacs-user-mode-line-format nil
          treemacs-user-header-line-format nil
          treemacs-wide-toggle-width 70
          treemacs-width 35
          treemacs-width-increment 1
          treemacs-width-is-initially-locked t
          treemacs-workspace-switch-cleanup nil)
    (treemacs-peek-mode 1)
    (treemacs-filewatch-mode t)
    (treemacs-follow-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))
#+end_src
** =treemacs-projectile=
#+begin_src emacs-lisp -n
  (use-package treemacs-projectile
    :ensure
    :after treemacs)
#+end_src
** =treemacs-icons-dired=
#+begin_src emacs-lisp -n
  (use-package treemacs-icons-dired
    :ensure
    :after treemacs
    :hook (dired-mode . treemacs-icons-dired-enable-once))
#+end_src
** =treemacs-magit=
#+begin_src emacs-lisp -n
  (use-package treemacs-magit
    :ensure
    :after treemacs magit)
#+end_src
** =treemacs-evil=
#+begin_src emacs-lisp -n
  (use-package treemacs-evil
    :ensure
    :after treemacs evil)
#+end_src
** =lsp-treemacs=
#+begin_src emacs-lisp -n
  (use-package lsp-treemacs
    :ensure
    :after treemacs lsp
    :config
    (lsp-treemacs-sync-mode 1))
#+end_src
** =treemacs-perspective=
#+begin_src emacs-lisp -n
  (use-package treemacs-perspective
    :ensure
    :after treemacs perspective
    :config
    (treemacs-set-scope-type 'Perspectives))
#+end_src
** =treemacs-tab-bar=
#+begin_src emacs-lisp -n
  (use-package treemacs-tab-bar
    :ensure
    :after treemacs)
#+end_src
** =treemacs-nerd-icons=
#+begin_src emacs-lisp -n
  (use-package treemacs-nerd-icons
    :ensure
    :config
    (treemacs-load-theme "nerd-icons"))
#+end_src
** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-treemacs)
  ;;; config-treemacs.el ends here
#+end_src
* Mail
:PROPERTIES:
:header-args: :tangle ./modules/config-mail.el :mkdirp t
:END:
** header                                                         :noexport:
#+begin_src emacs-lisp -n
  ;;; config-mail --- mail configuration file -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
** =notmuch= main package
#+begin_src emacs-lisp -n
  (use-package notmuch
    :ensure
    :if (executable-find "notmuch")
    :hook
    (message-setup . mml-secure-sign-pgpmime)
    :config
    (global-set-key (kbd "<XF86Mail>") 'notmuch)
    (setq notmuch-fcc-dirs nil
          notmuch-search-result-format
          '(("date" . "%12s ")
            ("count" . "%-7s ")
            ("authors" . "%-30s ")
            ("subject" . "%-72s ")
            ("tags" . "(%s)"))
          notmuch-tag-formats
          '(("unread"
             (propertize tag 'face 'notmuch-tag-unread))
            ("flagged"
             (propertize tag 'face 'notmuch-tag-flagged)
             (notmuch-tag-format-image-data tag
                                            (notmuch-tag-star-icon))))
          notmuch-tagging-keys
          '(("a" notmuch-archive-tags "Archive")
            ("u" notmuch-show-mark-read-tags "Mark read")
            ("f" ("+flagged") "Flag")
            ("s" ("+spam" "-inbox") "Mark as spam")
            ("d" ("+deleted" "-inbox") "Delete"))
          notmuch-saved-searches
          '((:name "flagged" :query "tag:flagged" :key "f")
            (:name "sent" :query "tag:sent" :key "s")
            (:name "drafts"  :query "tag:draft" :key "d")
            (:name "all mail" :query "*" :key "a")
            (:name "unread" :query "tag:unread" :key "u")
            (:name "zum" :query "tag:zum" :key "z")
            (:name "mkn" :query "tag:mkn" :key "c")
            (:name "gmail" :query "tag:gmail" :key "g")
            (:name "hotmail" :query "tag:hotmail" :key "h")
            (:name "yahoo" :query "tag:yahoo" :key "h")
            (:name "ymail" :query "tag:ymail" :key "m")
            (:name "Today"
                   :query "date:today AND NOT tag:spam AND NOT tag:bulk"
                   :key "T"
                   :search-type 'tree
                   :sort-order 'newest-first)
            (:name "This Week"
                   :query "date:weeks AND NOT tag:spam AND NOT tag:bulk"
                   :key "W"
                   :search-type 'tree
                   :sort-order 'newest-first)
            (:name "This Month"
                   :query "date:months AND NOT tag:spam AND NOT tag:bulk"
                   :key "M"
                   :search-type 'tree
                   :sort-order 'newest-first)
            (:name "flagged"
                   :query "tag:flagged AND NOT tag:spam AND NOT tag:bulk"
                   :key "f"
                   :search-type 'tree
                   :sort-order 'newest-first)
            (:name "spam" :query "tag:spam"))
          notmuch-archive-tags '("-inbox" "-unread"))
    (setq-default notmuch-search-oldest-first nil)
    (if (executable-find "gpg2")
        (setq notmuch-crypto-gpg-program "gpg2")
      (setq notmuch-crypto-gpg-program "gpg"))
    (setq notmuch-crypto-process-mime t
          mml-secure-openpgp-sign-with-sender t)
    (define-key notmuch-show-mode-map "S"
                (lambda ()
                  "Mark message as spam"
                  (interactive)
                  (notmuch-show-tag (list +spam -new)))))
#+end_src
** =notmuch-indicator=
#+begin_src emacs-lisp -n
  (use-package notmuch-indicator
    :ensure
    :config
    (setq notmuch-indicator-args
          '((:terms "tag:unread and tag:inbox" :label "U" :label-face success)))
    (notmuch-indicator-mode))
#+end_src
** =consult-notmuch=
#+begin_src emacs-lisp -n
  (use-package consult-notmuch
    :ensure
    :config
    (add-to-list 'consult-buffer-sources 'consult-notmuch-buffer-source))
#+end_src
** =ol-notmuch=
#+begin_src emacs-lisp -n
  (use-package ol-notmuch
    :ensure)
#+end_src
** =notmuch-maildir=
#+begin_src emacs-lisp -n
  (use-package notmuch-maildir
    :ensure
    :config
    (notmuch-maildir-inject-section))
#+end_src
** =message=                                                       :builtin:
#+begin_src emacs-lisp -n
  (use-package message
    :custom
    (message-directory (expand-file-name ".mail" (getenv "HOME")))
    (message-sendmail-envelope-from 'header))
#+end_src
** =sendmail=                                                      :builtin:
#+begin_src emacs-lisp -n
  (use-package sendmail
    :custom
    (mail-specify-envelope-from t)
    (mail-envelope-from 'header)
    (send-mail-function 'sendmail-send-it)
    (sendmail-program (executable-find "msmtp")))
#+end_src
** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-mail)
  ;;; config-mail.el ends here
#+end_src
* Programming
These are the /programming languages/ that I interacts the most, I'm not a programmer, but I've been using GNU/Linux for a while now.
** Flycheck
:PROPERTIES:
:header-args: :tangle ./modules/config-flycheck.el :mkdirp t
:END:
*** header                                                         :noexport:
#+begin_src emacs-lisp -n
  ;;; config-flycheck --- flycheck -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =flycheck= package
#+begin_src emacs-lisp -n
  ;;;###autoload
  (defun +syntax-init-popups-h ()
    "Activate `flycheck-posframe-mode' if available and in GUI Emacs.
  Activate `flycheck-popup-tip-mode' otherwise.
  Do nothing if `lsp-ui-mode' is active and `lsp-ui-sideline-enable' is non-nil."
    (unless (and (bound-and-true-p lsp-ui-mode)
                 lsp-ui-sideline-enable)
      (if (and (fboundp 'flycheck-posframe-mode)
               (display-graphic-p))
          (flycheck-posframe-mode +1)
        (flycheck-popup-tip-mode +1))))

  (use-package flycheck
    :ensure
    :diminish
    :commands flycheck-list-errors flycheck-buffer
    :hook (prog-mode . global-flycheck-mode)
    :config
    (delq 'new-line flycheck-check-syntax-automatically)
    (setq flycheck-emacs-lisp-load-path 'inherit
          flycheck-idle-change-delay 1.0
          flycheck-buffer-switch-check-intermediate-buffers t
          flycheck-display-errors-delay 0.25)
    (evil-add-command-properties #'flycheck-next-error :repeat t :jump t)
    (evil-add-command-properties #'flycheck-previous-error :repeat t :jump t))
#+end_src
*** =consult-flycheck=
#+begin_src emacs-lisp -n
  (use-package consult-flycheck
    :ensure
    :after consult flycheck)
#+end_src
*** =flycheck-posframe=
#+begin_src emacs-lisp -n
  (use-package flycheck-posframe
    :if (display-graphic-p)
    :ensure)
#+end_src
*** =flycheck-popup-tip=
#+begin_src emacs-lisp -n
  (use-package flycheck-popup-tip
    :ensure
    :commands flycheck-popup-tip-show-popup flycheck-popup-tip-delete-popup
    :hook (flycheck-mode . +syntax-init-popups-h)
    :hook ((evil-insert-state-entry
            evil-replace-state-entry) . flycheck-popup-tip-delete-popup)
    :config
    (setq flycheck-popup-tip-error-prefix "X "))
#+end_src
*** =flycheck-color-mode-line=
#+begin_src emacs-lisp -n
  (use-package flycheck-color-mode-line
    :ensure
    :hook (flycheck-mode . flycheck-color-mode-line-mode))
#+end_src
*** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-flycheck)
  ;;; config-flycheck.el ends here
#+end_src
** Lisp
:PROPERTIES:
:header-args: :tangle ./modules/config-lisp.el :mkdirp t
:END:
*** header                                                         :noexport:
#+begin_src emacs-lisp -n
  ;;; config-lisp --- Various lisp configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =elisp-mode=                                                    :builtin:
#+begin_src emacs-lisp -n
  (when (locate-library "aggressive-indent")
    (add-hook 'lisp-mode-hook #'aggressive-indent-mode)
    (add-hook 'clojure-mode-hook #'aggressive-indent-mode)
    (add-hook 'scheme-mode-hook #'aggressive-indent-mode))

  ;;;; emacs-lisp -n
  (use-package elisp-mode
    :diminish emacs-lisp-mode
    :diminish elisp-mode
    :diminish outline-minor-mode
    :diminish lisp-data-mode
    :mode ("\\.Cask\\'" . emacs-lisp-mode)
    :ensure nil
    :hook (emacs-lisp-mode . (lambda ()
                               (outline-minor-mode)
                               (rainbow-delimiters-mode))))
#+end_src
**** =ielm=                                                       :builtin:
#+begin_src emacs-lisp -n
  (use-package ielm
    :ensure nil
    :hook (ielm-mode . (turn-on-smartparens-mode))
    :config
    (setq ielm-font-lock-keywords
          (append '(("\\(^\\*\\*\\*[^*]+\\*\\*\\*\\)\\(.*$\\)"
                     (1 font-lock-comment-face)
                     (2 font-lock-constant-face)))
                  (when (require 'highlight-numbers nil t)
                    (highlight-numbers--get-regexp-for-mode 'emacs-lisp-mode))
                  (cl-loop for (matcher . match-highlights)
                           in (append lisp-el-font-lock-keywords-2
                                      lisp-cl-font-lock-keywords-2)
                           collect
                           `((lambda (limit)
                               (when ,(if (symbolp matcher)
                                          `(,matcher limit)
                                        `(re-search-forward ,matcher limit t))
                                 ;; Only highlight matches after the prompt
                                 (> (match-beginning 0) (car comint-last-prompt))
                                 ;; Make sure we're not in a comment or string
                                 (let ((state (syntax-ppss)))
                                   (not (or (nth 3 state)
                                            (nth 4 state))))))
                             ,@match-highlights)))))
#+end_src
**** =elisp-demos=
#+begin_src emacs-lisp -n
  (use-package elisp-demos
    :ensure
    :init
    (advice-add #'describe-function-1 :after #'elisp-demos-advice-describe-function-1)
    (advice-add #'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src
**** =eros=
#+begin_src emacs-lisp -n
  (use-package eros
    :ensure
    :config
    (eros-mode 1))
#+end_src
**** =buttercup=
#+begin_src emacs-lisp -n
  (use-package buttercup
    :ensure
    :defer t
    :config
    (with-eval-after-load 'evil
      (add-hook 'buttercup-minor-mode-hook #'evil-normalize-keymaps)))
#+end_src
*** =macrostep=
#+begin_src emacs-lisp -n
  (use-package macrostep
    :ensure
    :bind (:map emacs-lisp-mode-map
                ("C-c e" . macrostep-expand)))
#+end_src
*** =common-lisp=
#+begin_src emacs-lisp -n
  ;;;; common-lisp
  (when (file-directory-p (expand-file-name "site-lisp/sly-stepper" user-emacs-directory))
    (add-to-list 'load-path (expand-file-name "site-lisp/sly-stepper" user-emacs-directory)))
  (when (file-directory-p (expand-file-name "site-lisp/sly-quicklisp" user-emacs-directory))
    (add-to-list 'load-path (expand-file-name "site-lisp/sly-quicklisp" user-emacs-directory)))
  (when (file-directory-p (expand-file-name "site-lisp/sly-macrostep" user-emacs-directory))
    (add-to-list 'load-path (expand-file-name "site-lisp/sly-macrostep" user-emacs-directory)))

  (defvar inferior-lisp-program "sbcl")
  (when (executable-find "ros")
    (setq inferior-lisp-program "ros -Q run"))

  (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)
#+end_src
**** =sly=
#+begin_src emacs-lisp -n
  (use-package sly
    :ensure
    :commands sly-autoloads
    :hook ((lisp-mode-local-vars . rainbow-delimiters-mode)
           (lisp-mode . sly-editing-mode)))
#+end_src
**** =sly-stepper=
#+begin_src emacs-lisp -n
  (use-package sly-stepper
    :ensure nil
    :after sly
    :config
    (require 'sly-stepper-autoloads))
#+end_src
**** =sly-quicklisp=
#+begin_src emacs-lisp -n
  (use-package sly-quicklisp
    :ensure nil
    :after sly
    :config
    (require 'sly-quicklisp-autoloads))
#+end_src
**** =sly-macrostep=
#+begin_src emacs-lisp -n
  (use-package sly-macrostep
    :ensure nil
    :after sly
    :config
    (require 'sly-macrostep-autoloads))
#+end_src
**** =sly-asdf=
#+begin_src emacs-lisp -n
  (use-package sly-asdf
    :ensure
    :after sly
    :config
    (add-to-list 'sly-contribs 'sly-asdf 'append))
#+end_src
**** =lispy=
#+begin_src emacs-lisp -n
  (use-package lispy
    :ensure
    :hook ((emacs-lisp-mode . lispy-mode)
           (lisp-mode . lispy-mode)
           (scheme-mode . lispy-mode)
           (geiser-mode . lispy-mode)))
#+end_src
**** =lispyville=
#+begin_src emacs-lisp -n
  (use-package lispyville
    :ensure
    :hook (lispy-mode . lispyville-mode))
#+end_src
*** clojure
**** =cider=
#+begin_src emacs-lisp -n
  ;;;; clojure
  (use-package cider
    :ensure)
#+end_src
**** =clj-refactor=
#+begin_src emacs-lisp -n
  (use-package clj-refactor
    :ensure
    :hook (clojure-mode . +config/clojure-mode-hook)
    :config
    (defun +config/clojure-mode-hook ()
      (clj-refactor-mode 1)
      ;; This choice of keybinding leaves cider-macroexpand-1 unbound
      (cljr-add-keybindings-with-prefix "C-c r")))
#+end_src
*** Scheme
**** =geiser=
#+begin_src emacs-lisp -n
  ;;;; scheme
  (use-package geiser
    :ensure
    :diminish geiser-autodoc-mode
    ;; :hook (geiser-repl-mode . turn-on-smartparens-strict-mode)
    :init
    (setq geiser-autodoc-identifier-format "%s → %s"
          geiser-repl-per-project-p t
          geiser-repl-history-filename (concat user-emacs-directory "geiser-history")))
#+end_src
**** =geiser-guile=
#+begin_src emacs-lisp -n
  (use-package geiser-guile
    :ensure
    :config
    (let ((nonguix-path (expand-file-name "Projects/guix/nonguix"
                                          (getenv "HOME")))
          (personal-path (expand-file-name "Projects/guix/devel/src"
                                           (getenv "HOME"))))
      (when (file-directory-p nonguix-path)
        (add-to-list 'geiser-guile-load-path nonguix-path))
      (when (file-directory-p personal-path)
        (add-to-list 'geiser-guile-load-path personal-path))))
#+end_src
**** =macrostep-geiser=
#+begin_src emacs-lisp -n
  (use-package macrostep-geiser
    :ensure
    :after geiser-mode geiser-repl
    :hook ((geiser-mode geiser-repl-mode) . macrostep-geiser-setup)
    :bind (:map geiser-mode-map
                ("C-c e" . macrostep-expand)))
#+end_src
*** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-lisp)
  ;;; config-lisp.el ends here
#+end_src
** C and C++
:PROPERTIES:
:header-args: :tangle ./modules/config-cc.el :mkdirp t
:END:
*** header                                                         :noexport:
#+begin_src emacs-lisp -n
  ;;; config-cc `cc-mode' configuratition -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =cc-mode=                                                       :builtin:
#+begin_src emacs-lisp -n
  (use-package cc-mode
    :mode ("\\.mm\\'" . objc-mode)
    :mode ("\\.h\\'" . +cc-c-c++-objc-mode)
    :hook (c-mode-common . rainbow-delimiters-mode)
    ;; :hook (c++-mode-local-vars . c++-ts-mode)
    ;; :hook (c-mode-common . c-ts-base-mode)
    ;; :hook (cmake-mode-local-vars . cmake-ts-mode)
    :config
    (setq c-basic-offset tab-width
          c-backspace-function #'delete-backward-char)
    (with-eval-after-load 'ffap
      (add-to-list 'ffap-alist '(c-mode . ffap-c-mode))))
#+end_src
*** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-cc)
  ;;; config-cc-mode.el ends here
#+end_src
** XML
:PROPERTIES:
:header-args: :tangle ./modules/config-xml.el :mkdirp t
:END:
*** header                                                         :noexport:
#+begin_src emacs-lisp -n
  ;;; config-xml --- `xml-mode' configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =nxml-mode=                                                     :builtin:
#+begin_src emacs-lisp -n
  (use-package nxml-mode
    :mode "\\.p\\(?:list\\|om\\)\\'" ; plist, pom
    :mode "\\.xs\\(?:d\\|lt\\)\\'"   ; xslt, xsd
    :mode "\\.rss\\'"
    :hook
    (xml-mode . lsp-deferred)
    :config
    (setq nxml-slash-auto-complete-flag t
          nxml-auto-insert-xml-declaration-flag t))
#+end_src
*** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-xml)
  ;;; config-xml.el ends here
#+end_src
** YAML
:PROPERTIES:
:header-args: :tangle ./modules/config-yaml.el :mkdirp t
:END:
*** header                                                         :noexport:
#+begin_src emacs-lisp -n
;;; config-yaml --- `yaml-mode' configuration -*- lexical-binding: t -*-
;;; Commentary:
;;; Code:
#+end_src
*** =yaml-mode=
#+begin_src emacs-lisp -n
(use-package yaml-mode
  :ensure
  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
  (setq tab-width 2)
  ;; (when (treesit-available-p)
  ;;   (add-to-list 'major-mode-remap-alist '(yaml-mode . yaml-ts-mode)))
  :hook
  ((yaml-mode . (lambda ()
                   (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
   (yaml-mode . (lambda ()
                  (run-hooks 'prog-mode-hook)))
   (yaml-mode . lsp-deferred)
   ))
#+end_src
*** footer                                                         :noexport:
#+begin_src emacs-lisp -n
(provide 'config-yaml)
;;; config-yaml.el ends here
#+end_src
** TOML
:PROPERTIES:
:header-args: :tangle ./modules/config-toml.el :mkdirp t
:END:
*** header                                                         :noexport:
#+begin_src emacs-lisp -n
  ;;; config-toml --- `toml-mode' configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =toml-mode=
#+begin_src emacs-lisp -n
  (use-package toml-mode
    :ensure
    :mode
    ("\\.toml\\'" . toml-mode)
    :hook
    (toml-mode . lsp-deferred)
    :config
    ;; (when (treesit-available-p)
    ;; 	(add-to-list 'major-mode-remap-alist '(toml-mode . toml-ts-mode)))
    (with-eval-after-load 'lsp-mode
      (setq lsp-toml-command (executable-find "taplo")))
    (add-to-list 'lsp-language-id-configuration '("\\.toml$" . "toml")))
#+end_src
*** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-toml)
  ;;; config-toml.el ends here
#+end_src
** Lua
:PROPERTIES:
:header-args: :tangle ./modules/config-lua.el :mkdirp t
:END:
*** header                                                         :noexport:
#+begin_src emacs-lisp -n
  ;;; config-lua --- `lua-mode' configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =lua-mode=
#+begin_src emacs-lisp -n
  (use-package lua-mode
    :ensure
    :hook (lua-mode . lsp-deferred)
    :config
    (with-eval-after-load 'lsp-mode
      (setq lsp-lua-hint-enable t
            lsp-lua-hint-set-type t)))
#+end_src
*** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-lua)
  ;;; config-lua.el end
#+end_src
** Jinja2
:PROPERTIES:
:header-args: :tangle ./modules/config-jinja2.el :mkdirp t
:END:
*** header                                                         :noexport:
#+begin_src emacs-lisp -n
  ;;; config-jinja2 --- `jinja2-mode' configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =jinja2-mode=
#+begin_src emacs-lisp -n
  (use-package jinja2-mode
    :ensure
    :config
    ;; The default behavior is to reindent the whole buffer on save. This is
    ;; disruptive and imposing. There are indentation commands available; the user
    ;; can decide when they want their code reindented.
    (setq jinja2-enable-indent-on-save nil)
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
    :hook
    (jinja2-mode . lsp-deferred))
#+end_src
*** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-jinja2)
  ;;; config-jinja2.el ends here
#+end_src
** json
:PROPERTIES:
:header-args: :tangle ./modules/config-json.el :mkdirp t
:END:
*** header                                                         :noexport:
#+begin_src emacs-lisp -n
  ;;; config-json --- `json-mode' configuration file -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Configuration for json.
  ;;; Code:
#+end_src
*** =json-mode=                                                     :builtin:
#+begin_src emacs-lisp -n
  (use-package json-mode
    :hook
    (json-mode . lsp-deferred))
#+end_src
*** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-json)
  ;;; config-json.el ends here
#+end_src
** Web mode
:PROPERTIES:
:header-args: :tangle ./modules/config-web.el :mkdirp t
:END:
*** header                                                         :noexport:
#+begin_src emacs-lisp -n
  ;;; config-web.el --- html configuration             -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =web-mode=
#+begin_src emacs-lisp -n
  (defun +config/django-web-mode ()
    "Set web-engine to django if `manage.py' detected in `projectile-project-root'."
    (if (projectile-project-p)
        (if (file-exists-p (concat (projectile-project-root) "manage.py"))
            (web-mode-set-engine "django"))))

  (defun +config/web-mode-fix-js-comment ()
    "Fix comment handling in `web-mode' for JavaScript (from `doom')."
    (when (member web-mode-content-type '("javascript" "jsx"))
      ;; For some reason the default is to insert HTML comments even
      ;; in JavaScript.
      (setq-local comment-start "//")
      (setq-local comment-end "")
      ;; Needed since otherwise the default value generated by
      ;; `comment-normalize-vars' will key off the syntax and think
      ;; that a single "/" starts a comment, which completely borks
      ;; auto-fill.
      (setq-local comment-start-skip "// *")))

  (use-package web-mode
    :ensure
    :mode "\\.[px]?html?\\'"
    :mode "\\.\\(?:tpl\\|blade\\)\\(?:\\.php\\)?\\'"
    :mode "\\.erb\\'"
    :mode "\\.[lh]?eex\\'"
    :mode "\\.jsp\\'"
    :mode "\\.as[cp]x\\'"
    :mode "\\.ejs\\'"
    :mode "\\.hbs\\'"
    :mode "\\.mustache\\'"
    :mode "\\.svelte\\'"
    :mode "\\.twig\\'"
    :mode "\\.jinja2?\\'"
    :mode "\\.eco\\'"
    :mode "wp-content/themes/.+/.+\\.php\\'"
    :mode "templates/.+\\.php\\'"
    :init
    ;; If the user has installed `vue-mode' then, by appending this to
    ;; `auto-mode-alist' rather than prepending it, its autoload will have
    ;; priority over this one.
    (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode) 'append)
    :mode "\\.vue\\'"
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-enable-auto-closing t
          web-mode-auto-close-style 1
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-enable-auto-pairing nil
          web-mode-enable-block-face t
          web-mode-enable-comment-interpolation t
          web-mode-enable-heredoc-fontification t
          web-mode-enable-css-colorization t
          web-mode-enable-part-face t
          web-mode-enable-current-element-highlight t
          web-mode-enable-current-column-highlight t
          web-mode-style-padding 1
          web-mode-script-padding 1
          web-mode-block-padding 0
          web-mode-comment-style 2
          web-mode-enable-curly-brace-indentation t
          web-mode-enable-auto-quoting nil
          web-mode-engines-alist
          '(("php" . "\\.phtml\\'")
            ("blade" . "\\.blade\\'")
            ("elixir" . "\\.eex\\'")
            ("phoenix" . "\\.[lh]eex\\'")))
    ;; web-mode-extra-auto-pairs
    ;; '(("erb" . (("beg" "end")))
    ;;   ("php" . (("beg" "end")))))
    (with-eval-after-load 'smartparens
      (sp-local-pair 'web-mode "<" nil :actions :rem)
      (sp-local-pair 'web-mode "{%" " %}")
      (sp-local-pair 'web-mode "{{" " }}")
      (sp-local-pair 'web-mode "<!--" " -->")
      )
    (defun +config/web-mode-hook ()
      "Hooks for Web mode."
      (local-set-key (kbd "RET") 'newline-and-indent))
    ;; Use // instead of /* as the default comment delimited in JS
    (with-eval-after-load 'web-mode
      (setf (alist-get "javascript" web-mode-comment-formats nil nil #'equal)
            "//"))
    :hook ((html-mode
            web-mode
            html-mode-local-vars-hook
            web-mode-local-vars-hook
            nxml-mode-local-vars-hook) . lsp-deferred)
    :hook ((html-mode-local-vars-hook
            mhtml-mode-local-vars-hook) . tree-sitter)
    :hook (web-mode . +config/django-web-mode))
#+end_src
*** =emmet-mode=
#+begin_src emacs-lisp -n
  (use-package emmet-mode
    :ensure
    :hook (css-mode web-mode html-mode haml-mode nxml-mode rjsx-mode reason-mode)
    :config
    (when (require 'yasnippet nil t)
      (add-hook 'emmet-mode-hook #'yas-minor-mode-on))
    (setq emmet-move-cursor-between-quotes t))
#+end_src
*** =skewer-mode=
#+begin_src emacs-lisp -n
  (use-package skewer-mode
    :ensure
    :hook ((web-mode . skewer-html-mode)
           (js2-mode . skewer-mode)))
#+end_src
*** =lsp-tailwindcss=
#+begin_src emacs-lisp -n
  (use-package lsp-tailwindcss
    :ensure
    :init
    (setq lsp-tailwindcss-add-on-mode t))
#+end_src
*** =sass-mode=
#+begin_src emacs-lisp -n
  (use-package sass-mode
    :ensure
    :hook (scss-mode . rainbow-mode)
    :hook (scss-mode-local-vars . lsp-deferred))
#+end_src
*** =css-eldoc=
#+begin_src emacs-lisp -n
  (use-package css-eldoc
    :ensure
    :commands turn-on-css-eldoc
    ;;add a hook if you want always to see the selector options in the minibuffer
    :config
    (add-hook 'css-mode-hook 'turn-on-css-eldoc)
    (add-hook 'scss-mode-hook 'turn-on-css-eldoc))
#+end_src
*** =com-css-sort=
#+begin_src emacs-lisp -n
  (use-package com-css-sort
    :ensure
    :commands (com-css-sort com-css-sort-attributes-block com-css-sort-attributes-document)
    :config
    (setq com-css-sort-sort-type 'alphabetic-sort))
#+end_src
*** =css-mode=                                                      :builtin:
#+begin_src emacs-lisp -n
  (use-package css-mode
    :hook ((css-mode
            stylus-mode) . rainbow-mode)
    :hook ((css-mode-local-vars
            less-css-mode-local-vars) . lsp-deferred)
    :hook (css-mode-local-vars . tree-sitter)
    :hook (css-mode . lsp-deferred)
    :config
    (with-eval-after-load 'skewer-mode
      (add-hook 'css-mode-hook 'skewer-css-mode)))
#+end_src
*** =javascript=
#+begin_src emacs-lisp -n
  (defvar +javascript-npm-conf (make-hash-table :test 'equal))

  ;;;###autoload
  (defun +javascript-npm-conf (&optional project-root refresh-p)
    "Retrieves an alist of this project's 'package.json'. If REFRESH-P is non-nil
  ignore the cache."
    (let ((project-root (or project-root (doom-project-root))))
      (or (and (not refresh-p)
               (gethash project-root +javascript-npm-conf))
          (let ((package-file (expand-file-name "package.json" project-root)))
            (when-let (json (and (file-exists-p package-file)
                                 (require 'json)
                                 (json-read-file package-file)))
              (puthash project-root json +javascript-npm-conf))))))

  ;;;###autoload
  (defun +javascript-npm-dep-p (packages &optional project-root refresh-p)
    (when-let (data (and (bound-and-true-p +javascript-npm-mode)
                         (+javascript-npm-conf project-root refresh-p)))
      (let ((deps (append (cdr (assq 'dependencies data))
                          (cdr (assq 'devDependencies data)))))
        (cond ((listp packages)
               (funcall (if (eq (car packages) 'and)
                            #'cl-every
                          #'cl-some)
                        (lambda (pkg) (assq pkg deps))
                        (if (listp packages) packages (list packages))))
              ((symbolp packages)
               (assq packages deps))
              (t (error "Expected a package symbol or list, got %s" packages))))))

  ;;;###autoload
  (defun +javascript-add-npm-path-h ()
    "Add node_modules/.bin to `exec-path'."
    (when-let ((search-directory (or (doom-project-root) default-directory))
               (node-modules-parent (locate-dominating-file search-directory "node_modules/"))
               (node-modules-dir (expand-file-name "node_modules/.bin/" node-modules-parent)))
      (make-local-variable 'exec-path)
      (add-to-list 'exec-path node-modules-dir)
      (doom-log ":lang:javascript: add %s to $PATH" (expand-file-name "node_modules/" node-modules-parent))))


  ;;
  ;; Commands

  ;;;###autoload
  (defun +javascript/open-repl ()
    "Open a Javascript REPL. Meaning either `skewer-repl', if any of the
  skewer-*-mode's are enabled, or `nodejs-repl' otherwise."
    (interactive)
    (call-interactively
     (if (and (featurep 'skewer-mode)
              (or (bound-and-true-p skewer-mode)
                  (bound-and-true-p skewer-css-mode)
                  (bound-and-true-p skewer-html-mode)))
         #'skewer-repl
       #'nodejs-repl))
    (current-buffer))

  ;;;###autoload
  (defun +javascript/skewer-this-buffer ()
    "Toggle a globalized skewer-mode, attaching an external browser (once),
  initiating an internal httpd server (once) and enabling the appropriate
  skewer-mode for the current buffer.

  Run this for any buffer you want to skewer."
    (interactive)
    (when (bound-and-true-p impatient-mode)
      (error "Skewer-mode isn't compatible with impatient mode"))
    (require 'skewer-mode)
    (unless (process-status "httpd")
      (run-skewer))
    (pcase major-mode
      ((or 'css-mode 'scss-mode 'less-css-mode)
       (unless (bound-and-true-p skewer-css-mode)
         (skewer-css-mode +1)))
      ((or 'web-mode 'html-mode)
       (unless (bound-and-true-p skewer-html-mode)
         (skewer-html-mode +1)))
      ('js2-mode
       (unless (bound-and-true-p skewer-mode)
         (skewer-mode +1)))
      (_ (error "Invalid mode %s" major-mode))))

  ;;;###autoload
  (defun +javascript/skewer-cleanup ()
    "Disable skewer-mode globally and disable the httpd server."
    (interactive)
    (when (process-status "httpd")
      (httpd-stop))
    (dolist (buf (buffer-list))
      (with-current-buffer buf
        (if (bound-and-true-p skewer-mode)
            (skewer-mode -1))
        (if (bound-and-true-p skewer-css-mode)
            (skewer-css-mode -1))
        (if (bound-and-true-p skewer-html-mode)
            (skewer-html-mode -1)))))

  ;;
  ;; Hooks

  ;;;###autoload
  (defun +javascript-cleanup-tide-processes-h ()
    "Clean up dangling tsserver processes if there are no more buffers with
  `tide-mode' active that belong to that server's project."
    (when tide-mode
      (unless (cl-loop with project-name = (tide-project-name)
                       for buf in (delq (current-buffer) (buffer-list))
                       if (and (buffer-local-value 'tide-mode buf)
                               (with-current-buffer buf
                                 (string= (tide-project-name) project-name)))
                       return buf)
        (kill-process (tide-current-server)))))

  ;;
  ;; Advice

  ;;;###autoload
  (defun +javascript-tide-project-root-a ()
    "Resolve to `doom-project-root' if `tide-project-root' fails."
    (or tide-project-root
        (or (locate-dominating-file default-directory "tsconfig.json")
            (locate-dominating-file default-directory "jsconfig.json"))))

  (with-eval-after-load 'projectile
    (add-to-list 'projectile-globally-ignored-directories "^node_modules$")
    (add-to-list 'projectile-globally-ignored-directories "^flow-typed$"))
#+end_src
*** =js2-mode=
#+begin_src emacs-lisp -n
  (use-package js2-mode
    :interpreter ("node" . js2-mode)
    :hook ((js2-mode) . lsp-deferred)
    :hook (js2-mode . rainbow-delimiters-mode)
    :hook (js2-mode . js2-imenu-extras-mode)
    :hook (js2-mode . (lambda () (push '("function" . ?ƒ) prettify-symbols-alist)))
    :config
    (with-eval-after-load 'skewer-mode
      (add-hook 'js2-mode 'skewer-mode))
    (setq-default js2-basic-indent 2
                  js2-basic-offset 2
                  js2-auto-indent-p t
                  js2-cleanup-whitespace t
                  js2-enter-indents-newline t
                  js2-indent-on-enter-key t
                  js2-global-externs (list "window" "module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON" "jQuery" "$")))
#+end_src
*** =xref-js2=
#+begin_src emacs-lisp -n
  (use-package xref-js2
    :ensure
    :if (executable-find "ag") ; silver-searcher
    :config
    (add-hook 'js2-mode-hook (lambda ()
                               (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))
#+end_src
*** =js2-refactor=
#+begin_src emacs-lisp -n
  (use-package js2-refactor
    :ensure
    :demand t
    :hook (js2-mode . js2-refactor-mode)
    :init
    (js2r-add-keybindings-with-prefix "C-c C-r")
    :config
    (setq js2-skip-preprocessor-directives t))
#+end_src
*** =rjsx-mode=
#+begin_src emacs-lisp -n
  (use-package rjsx-mode
    :ensure
    :mode "\\.[mc]?js\\'"
    :mode "\\.es6\\'"
    :mode "\\.pac\\'"
    :hook (rjsx-mode . rainbow-delimiters-mode)
    :hook (rjsx-mode . rainbow-mode)
    :bind (([remap comment-dwim ] . rjsx-comment-dwim))
    :init
    (with-eval-after-load 'compilation
      (add-to-list 'compilation-error-regexp-alist 'node)
      (add-to-list 'compilation-error-regexp-alist-alist '(node "^[[:blank:]]*at \\(.*(\\|\\)\\(.+?\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)"
                          2 3 4)))
    :config
    (with-eval-after-load 'compilation
      (add-to-list 'compilation-error-regexp-alist 'node)
      (add-to-list 'compilation-error-regexp-alist-alist
                   '(node "^[[:blank:]]*at \\(.*(\\|\\)\\(.+?\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)"
                          2 3 4)))
    (setq js-chain-indent t
          ;; These have become standard in the JS community
          js2-basic-offset 2
          ;; Don't mishighlight shebang lines
          js2-skip-preprocessor-directives t
          ;; let flycheck handle this
          js2-mode-show-parse-errors nil
          js2-mode-show-strict-warnings nil
          ;; Flycheck provides these features, so disable them: conflicting with
          ;; the eslint settings.
          js2-strict-missing-semi-warning nil
          ;; maximum fontification
          js2-highlight-level 3
          js2-idle-timer-delay 0.15))
#+end_src
*** =typescript-mode=
#+begin_src emacs-lisp -n
  (use-package typescript-mode
    :ensure
    :hook (typescript-mode . rainbow-delimiters-mode)
    :hook (typescript-mode . lsp-deferred)
    :hook (typescript-tsx-mode . rainbow-delimiters-mode)
    :hook (typescript-tsx-mode . lsp-deferred)
    :hook (typescript-mode . (lambda () (setq comment-line-break-function #'js2-line-break
                                         typescript-indent-level (or (and (bound-and-true-p tide-mode)
                                                                          (plist-get (tide-tsfmt-options) :indentSize))
                                                                     typescript-indent-level)
                                         emmet-expand-jsx-className? t)))
    :init
    (add-to-list 'auto-mode-alist
                 (cons "\\.tsx\\'" #'typescript-mode))
    (with-eval-after-load 'flycheck
      (flycheck-add-mode 'javascript-eslint 'web-mode)
      (flycheck-add-mode 'javascript-eslint 'typescript-mode)
      (flycheck-add-mode 'javascript-eslint 'typescript-tsx-mode)
      (flycheck-add-mode 'typescript-tslint 'typescript-tsx-mode))
    (defun +javascript-disable-tide-checkers-h ()
      (add-to-list 'flycheck-disabled-checkers 'javascript-jshint)
      (add-to-list 'flycheck-disabled-checkers 'tsx-tide)
      (add-to-list 'flycheck-disabled-checkers 'jsx-tide))
    (add-hook 'typescript-tsx-mode-hook #'+javascript-disable-tide-checkers-h)
    :config
    (when (fboundp 'web-mode)
      (define-derived-mode typescript-tsx-mode web-mode "TypeScript-TSX"))
    (autoload 'js2-line-break "js2-mode" nil t))
#+end_src
*** =tide=
#+begin_src emacs-lisp -n
  (use-package tide
    :ensure
    :hook (tide-mode . tide-hl-identifier-mode)
    :config
    (setq tide-completion-detailed t
          tide-always-show-documentation t
          tide-server-max-response-length 524288
          tide-completion-setup-company-backend nil)
    (add-hook 'tide-mode-hook (lambda () (add-hook 'kill-buffer-hook #'+javascript-cleanup-tide-processes-h nil 'local))))
#+end_src
*** =npm-mode=
#+begin_src emacs-lisp -n
  (use-package npm-mode
    :ensure)
#+end_src
*** =nodejs-repl=
#+begin_src emacs-lisp -n
  (use-package nodejs-repl
    :ensure)

  (with-eval-after-load 'js
    (setq js-indent-level 2))
#+end_src
*** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-web)
  ;;; config-web.el ends here
#+end_src
** Latex
:PROPERTIES:
:header-args: :tangle ./modules/config-latex.el :mkdirp t
:END:
*** header                                                         :noexport:
#+begin_src emacs-lisp -n
  ;;; config-latex.el --- latex configuration          -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =auctex=                                                        :builtin:
#+begin_src emacs-lisp -n
  (use-package auctex
    :mode (("\\.tex\\'" . latex-mode)
           ("\\.latex\\'" . latex-mode))
    :commands (latex-mode LaTeX-mode plain-tex-mode)
    :init
    (progn
      (add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup)
      (add-hook 'LaTeX-mode-hook #'flyspell-mode)
      (add-hook 'LaTeX-mode-hook #'turn-on-reftex)
      (setq-default TeX-engine 'xetex)
      (setq TeX-auto-save nil
            TeX-parse-self nil
            TeX-save-query nil
            TeX-PDF-mode t)
      (setq-default TeX-master nil)))
#+end_src
*** =preview=                                                       :builtin:
#+begin_src emacs-lisp -n
  (use-package preview
    :ensure nil
    :after auctex
    :commands LaTeX-preview-setup
    :init
    (progn
      (setq-default preview-scale 1.4
                    preview-scale-function '(lambda () (* (/ 10.0 (preview-document-pt)) preview-scale)))))
#+end_src
*** =reftex=                                                        :builtin:
#+begin_src emacs-lisp -n
  (use-package reftex
    :ensure nil
    :commands turn-on-reftex
    :init
    (setq reftex-plug-into-AUCTeX t))
#+end_src
*** =bibtex=
#+begin_src emacs-lisp -n
  (use-package bibtex
    :config
    (setq bibtex-autokey-year-length 4
          bibtex-autokey-name-year-separator "-"
          bibtex-autokey-year-title-separator "-"
          bibtex-autokey-titleword-separator "-"
          bibtex-autokey-titlewords 2
          bibtex-autokey-titlewords-stretch 1
          bibtex-autokey-titleword-length 5))
#+end_src
*** =LaTex=
#+begin_src emacs-lisp -n
  ;; Auto-fill for LaTeX
  (defun lem-latex-auto-fill ()
    "Turn on auto-fill for LaTeX mode."
    (turn-on-auto-fill)
    (set-fill-column 80)
    (setq default-justification 'left))
  (add-hook 'LaTeX-mode-hook #'lem-latex-auto-fill)

  ;; Compilation command
  (add-hook 'LaTeX-mode-hook (lambda () (setq compile-command "latexmk -pdflatex=xelatex -f -pdf %f")))

  ;; Prevent ispell from verifying some LaTeX commands
  ;; http://stat.genopole.cnrs.fr/dw/~jchiquet/fr/latex/emacslatex
  (defvar lem-ispell-tex-skip-alists
    '("cite" "nocite"
      "includegraphics"
      "author" "affil"
      "ref" "eqref" "pageref"
      "label"))
  (setq ispell-tex-skip-alists
        (list
         (append (car ispell-tex-skip-alists)
                 (mapcar #'(lambda (cmd) (list (concat "\\\\" cmd) 'ispell-tex-arg-end)) lem-ispell-tex-skip-alists))
         (cadr ispell-tex-skip-alists)))

  ;; Indentation with align-current in LaTeX environments
  (defvar lem-LaTeX-align-environments '("tabular" "tabular*"))
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (require 'align)
              (setq LaTeX-indent-environment-list
                    ;; For each item in the list...
                    (mapcar (lambda (item)
                              ;; The car is an environment
                              (let ((env (car item)))
                                ;; If this environment is in our list...
                                (if (member env lem-LaTeX-align-environments)
                                    ;; ...then replace this item with a correct one
                                    (list env 'align-current)
                                  ;; else leave it alone
                                  item)))
                            LaTeX-indent-environment-list))))

  ;; Use dvipdfmx to convert DVI files to PDF in AUCTeX
  (eval-after-load 'tex
    '(add-to-list 'TeX-command-list
                  '("DVI to PDF" "dvipdfmx %d" TeX-run-command t t) t))

  ;; SyncTeX (http://www.emacswiki.org/emacs/AUCTeX#toc19)
  (defun synctex/un-urlify (fname-or-url)
    "A trivial function that replaces a prefix of file:/// with just /."
    (if (string= (substring fname-or-url 0 8) "file:///")
        (substring fname-or-url 7)
      fname-or-url))
#+end_src
*** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-latex)
  ;;; config-latex.el ends here
#+end_src
** Markdown
:PROPERTIES:
:header-args: :tangle ./modules/config-markdown.el :mkdirp t
:END:
*** header                                                         :noexport:
#+begin_src emacs-lisp -n
  ;;; config-markdown --- `markdown-mode' configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =markdown-mode=
#+begin_src emacs-lisp -n
  ;; autoloads (from doom)
  ;;; Compilation handlers

  ;;;###autoload
  (cond
   ((and (boundp 'transient-mark-mode) (boundp 'mark-active))
    (defun markdown-use-region-p ()
      "Compatibility wrapper to provide `use-region-p'."
      (and transient-mark-mode mark-active))))

  ;;;###autoload
  (defun +markdown-compile (beg end output-buffer)
    "Compile markdown into html.

  Runs `+markdown-compile-functions' until the first function to return non-nil,
  otherwise throws an error."
    (or (run-hook-with-args-until-success '+markdown-compile-functions
                                          beg end output-buffer)
        (user-error "No markdown program could be found. Install marked, pandoc, markdown or multimarkdown.")))

  ;;;###autoload
  (defun +markdown-compile-marked (beg end output-buffer)
    "Compiles markdown with the marked program, if available.
  Returns its exit code."
    (when (executable-find "marked")
      (apply #'call-process-region
             beg end "marked" nil output-buffer nil
             (when (eq major-mode 'gfm-mode)
               (list "--gfm" "--tables" "--breaks")))))

  ;;;###autoload
  (defun +markdown-compile-pandoc (beg end output-buffer)
    "Compiles markdown with the pandoc program, if available.
  Returns its exit code."
    (when (executable-find "pandoc")
      (call-process-region beg end "pandoc" nil output-buffer nil
                           "-f" "markdown"
                           "-t" "html"
                           "--mathjax"
                           "--highlight-style=pygments")))

  ;;;###autoload
  (defun +markdown-compile-multimarkdown (beg end output-buffer)
    "Compiles markdown with the multimarkdown program, if available. Returns its
  exit code."
    (when (executable-find "multimarkdown")
      (call-process-region beg end "multimarkdown" nil output-buffer)))

  ;;;###autoload
  (defun +markdown-compile-markdown (beg end output-buffer)
    "Compiles markdown using the Markdown.pl script (or markdown executable), if
  available. Returns its exit code."
    (when-let (exe (or (executable-find "Markdown.pl")
                       (executable-find "markdown")))
      (call-process-region beg end exe nil output-buffer nil)))

  (defvar +markdown-compile-functions
    '(+markdown-compile-marked
      +markdown-compile-pandoc
      +markdown-compile-markdown
      +markdown-compile-multimarkdown)
    "A list of commands to try when attempting to build a markdown file with
  `markdown-open' or `markdown-preview', stopping at the first one to return non-nil.

  Each function takes three argument. The beginning position of the region to
  capture, the end position, and the output buffer.")

  ;;;###autoload
  (defun +markdown/insert-del ()
    "Surround region in github strike-through delimiters."
    (interactive)
    (let ((regexp "\\(^\\|[^\\]\\)\\(\\(~\\{2\\}\\)\\([^ \n	\\]\\|[^ \n	]\\(?:.\\|\n[^\n]\\)*?[^\\ ]\\)\\(\\3\\)\\)")
          (delim "~~"))
      (if (markdown-use-region-p)
          ;; Active region
          (cl-destructuring-bind (beg . end)
              (markdown-unwrap-things-in-region
               (region-beginning) (region-end)
               regexp 2 4)
            (markdown-wrap-or-insert delim delim nil beg end))
        ;; Bold markup removal, bold word at point, or empty markup insertion
        (if (thing-at-point-looking-at regexp)
            (markdown-unwrap-thing-at-point nil 2 4)
          (markdown-wrap-or-insert delim delim 'word nil nil)))))

  (use-package markdown-mode
    :ensure
    :mode ("README\\.md\\'" . gfm-mode)
    :mode ("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode)
    :hook (markdown-mode . lsp-deferred)
    :diminish gfm-mode
    :init
    (require 'lsp-marksman)
    (cond
     ((executable-find "xdg-open")
      (setq markdown-open-command "xdg-open")))
    (cond ((executable-find "markdown")
           (setq markdown-command "markdown"))
          ((executable-find "multimarkdown")
           (setq markdown-command "multimarkdown"))
          ((executable-find "marked")
           (setq markdown-command "marked")))
    (setq markdown-enable-math t
          markdown-enable-wiki-links t
          markdown-italic-underscore t
          markdown-asymmetric-header t
          markdown-gfm-additional-languages '("sh")
          markdown-make-gfm-checkboxes-buttons t
          markdown-fontify-whole-heading-line t
          markdown-nested-imenu-heading-index (not (ignore-errors (native-comp-available-p)))
          markdown-command #'+markdown-compile
          markdown-content-type "application/xhtml+xml"
          markdown-css-paths
          '("https://cdn.jsdelivr.net/npm/github-markdown-css/github-markdown.min.css"
            "https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/github.min.css")
          markdown-xhtml-header-content
          (concat "<meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>"
                  "<style> body { box-sizing: border-box; max-width: 740px; width: 100%; margin: 40px auto; padding: 0 10px; } </style>"
                  "<script id='MathJax-script' async src='https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js'></script>"
                  "<script src='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/highlight.min.js'></script>"
                  "<script>document.addEventListener('DOMContentLoaded', () => { document.body.classList.add('markdown-body'); document.querySelectorAll('pre[lang] > code').forEach((code) => { code.classList.add(code.parentElement.lang); }); document.querySelectorAll('pre > code').forEach((code) => { hljs.highlightBlock(code); }); });</script>"))
    (with-eval-after-load 'org-src
      (add-to-list 'org-src-lang-modes '("md" . markdown)))
    :config
    (with-eval-after-load 'smartparens
      (sp-local-pair 'markdown-mode "-" "-" :actions '(wrap))
      (sp-local-pair '(markdown-mode gfm-mode) "`" "`"
                     :unless '(:add sp-point-before-word-p sp-point-before-same-p)))
    (with-eval-after-load 'rustic-mode
      (add-to-list 'markdown-code-lang-modes '("rust" . rustic-mode))))
#+end_src
*** =edit-indirect=
#+begin_src emacs-lisp -n
  (use-package edit-indirect
    :ensure
    :after markdown-mode)
#+end_src
*** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-markdown)
  ;;; config-markdown.el ends here
#+end_src
** Python
:PROPERTIES:
:header-args: :tangle ./modules/config-python.el :mkdirp t
:END:
*** header
#+begin_src emacs-lisp -n
  ;;; config-python --- `python-mode' configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =python=                                                        :builtin:
#+begin_src emacs-lisp -n
  (use-package python
    :mode ("[./]flake8\\'" . conf-mode)
    :mode ("/Pipfile\\'" . conf-mode)
    :hook ((python-mode . lsp-deferred)
           (python-mode . lsp-ui-mode)
           (python-mode . lsp-ui-doc-mode)
           ;; (python-mode . guess-style-guess-tab-mode)
           (python-mode-local-vars . (lambda ()
                                       (lsp-deferred)
                                       (tree-sitter))))
    :config
    (if (executable-find "ipython")
        (setq python-interpreter (executable-find "ipython"))
      (setq python-interpreter (executable-find "python3")))
    (when (featurep 'projectile)
      (add-to-list 'projectile-globally-ignored-directories "^\\.venv$"))
    (let ((directories `("/usr/bin/" "/usr/local/bin/" "/opt/bin" ,(expand-file-name ".local/bin/" (getenv "HOME")))))
      (dolist (directory directories) (when (file-directory-p directory)(add-to-list 'python-shell-exec-path directory))))
    (setq python-indent-guess-indent-offset nil
          python-shell-completion-native-enable nil
          python-shell-exec-path `(("/usr/bin/" "/usr/local/bin" ,(expand-file-name ".local/bin/" (getenv "HOME"))))
          python-indent-guess-indent-offset-verbose nil)
    (when (featurep 'lsp-mode)
      (setq lsp-pylsp-plugins-rope-completion-enabled t ; needs python-rope package
            lsp-pylsp-plugins-mccabe-enabled t ; needs python-mccabe package
            lsp-ruff-lsp-python-path (executable-find "python3")
            )
      (when (executable-find "black")
        (setq lsp-pylsp-plugins-black-enabled t))
      (when (executable-find "autopep8")
        (setq lsp-pylsp-plugins-autopep8-enabled t))
      (when (executable-find "flake8")
        (setq lsp-pylsp-plugins-flake8-enabled t))
      (when (executable-find "pycodestyle")
        (setq lsp-pylsp-plugins-pycodestyle-enabled t))
      (when (executable-find "pydocstyle")
        (setq lsp-pylsp-plugins-pydocstyle-enabled t))
      (when (executable-find "pylint")
        (setq lsp-pylsp-plugins-pylint-enabled t))
      (when (executable-find "pyflakes")
        (setq lsp-pylsp-plugins-pyflakes-enabled t))
      (when (executable-find "yapf")
        (setq lsp-pylsp-plugins-yapf-enabled t)))
    (when (featurep 'flycheck)
      (setq flycheck-python-mypy-executable (executable-find "mypy")
            flycheck-python-flake8-executable (executable-find "flake8")
            flycheck-python-pylint-executable (executable-find "pylint")
            flycheck-python-pyright-executable (executable-find "pyright"))))
#+end_src
*** =pydoc=
#+begin_src emacs-lisp -n
  (use-package pydoc
    :ensure)
#+end_src
*** =ob-ipython=
#+begin_src emacs-lisp -n
  (use-package ob-ipython
    :ensure
    :defer t
    :init
    (setq ob-ipython-resources-dir ".ob-ipython-resrc")
    (with-eval-after-load 'org-src
      (add-to-list 'org-src-lang-modes '("ipython" . python)))
    (with-eval-after-load 'ob-async
      (add-to-list 'ob-async-no-async-languages-alist "ipython")))
#+end_src
*** =pip-requirements=
#+begin_src emacs-lisp -n
  (use-package pip-requirements
    :ensure
    :defer t
    :config
    (add-hook 'pip-requirements-mode-hook #'pip-requirements-auto-complete-setup))
#+end_src
*** =inferior-python-mode=                                          :builtin:
#+begin_src emacs-lisp -n
  (use-package inferior-python-mode
    :hook (inferior-python-mode . hide-mode-line-mode))
#+end_src
*** =lsp-pyright=
#+begin_src emacs-lisp -n
  (use-package lsp-pyright
    :ensure
    :after lsp-mode
    :hook (python-mode . (lambda ()
                           (lsp-deferred)
                           (lsp-ui-mode)
                           (lsp-ui-doc-mode)))
    :config
    (setq lsp-pyright-python-executable-cmd
          (if (executable-find "python3")
              (executable-find "python3")
            "python")))
#+end_src
*** =python-docstring=
#+begin_src emacs-lisp -n
  (use-package python-docstring
    :ensure
    :diminish
    :hook (python-mode . python-docstring-mode))
#+end_src
*** =pipenv=
#+begin_src emacs-lisp -n
  (use-package pipenv
    :ensure
    :diminish
    :after python
    :commands pipenv-project-p
    :hook (python-mode . pipenv-mode)
    :init
    (setq pipenv-projectile-after-switch-function
          #'pipenv-projectile-after-switch-extended
          pipenv-executable (executable-find "pipenv")))
#+end_src
*** =flycheck-pycheckers=
#+begin_src emacs-lisp -n
  (use-package flycheck-pycheckers
    :ensure
    :config
    (with-eval-after-load 'flycheck
      (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup)))
#+end_src
*** =ein=
#+begin_src emacs-lisp -n
  (use-package ein
    :ensure t)
#+end_src
*** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-python)
  ;;; config-python.el ends here
#+end_src
** Rust
:PROPERTIES:
:header-args: :tangle ./modules/config-rust.el :mkdirp t
:END:
*** header                                                         :noexport:
#+begin_src emacs-lisp -n
  ;;; config-rust --- rust-mode configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =rust-mode=
#+begin_src emacs-lisp -n
  ;;;###autoload
  (defun +rust-cargo-project-p ()
    "Return t if this is a cargo project."
    (locate-dominating-file buffer-file-name "Cargo.toml"))

  ;;; Custom Cargo commands

  (autoload 'rustic-run-cargo-command "rustic-cargo")
  ;;;###autoload
  (defun +rust/cargo-audit ()
    "Run 'cargo audit' for the current project."
    (interactive)
    (rustic-run-cargo-command "cargo audit"))

  (with-eval-after-load 'projectile
    (add-to-list 'projectile-project-root-files "Cargo.toml"))

  (use-package rust-mode)
#+end_src
*** =rustic=
#+begin_src emacs-lisp -n
  (use-package rustic
    :ensure
    :mode ("\\.rs$" . rustic-mode)
    :init
    (with-eval-after-load 'rustic-flycheck
      (remove-hook 'rustic-mode-hook #'flycheck-mode)
      (remove-hook 'rustic-mode-hook #'flymake-mode-off)
      (remove-hook 'flycheck-mode-hook #'rustic-flycheck-setup))
    (with-eval-after-load 'org-src
      (defalias 'org-babel-execute:rust #'org-babel-execute:rustic))
    :config
    (add-hook 'rustic-mode-hook #'rainbow-delimiters-mode)
    (setq rustic-indent-method-chain t
          rustic-lsp-client 'lsp-mode)
    (add-hook 'rustic-mode-local-vars-hook #'rustic-setup-lsp 'append)
    (add-hook 'rustic-mode-local-vars-hook #'flycheck-mode)
    ;; (add-hook 'rustic-mode-local-vars-hook #'tree-sitter! 'append)
    (with-eval-after-load 'lsp
      (setq lsp-rust-analyzer-display-parameter-hints t)))
#+end_src
*** =flycheck-rust=
#+begin_src emacs-lisp -n
  (use-package flycheck-rust
    :ensure
    :after flycheck
    :config
    (with-eval-after-load 'rustic
      (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
#+end_src
*** footer                                                         :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-rust)
  ;;; config-rust.el ends here
#+end_src
** Ansible
:PROPERTIES:
:header-args: :tangle ./modules/config-ansible.el :mkdirp t
:END:
*** header                                                        :noexport:
#+begin_src emacs-lisp -n
  ;;; config-ansible --- ansible configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =ansible= package
#+begin_src emacs-lisp -n
  (use-package ansible
    :ensure
    :if (executable-find "ansible")
    :ensure
    :commands ansible-auto-decrypt-encrypt
    :hook (ansible . 'ansible-auto-decrypt-encrypt)
    :init
    (put 'ansible-vault-password-file 'safe-local-variable #'stringp)
    :config
    (setq ansible-section-face 'font-lock-variable-name-face
          ansible-task-label-face 'font-lock-doc-face))
#+end_src
*** =ansible-doc=
#+begin_src emacs-lisp -n
  (use-package ansible-doc
    :after ansible
    :ensure
    :hook (yaml-mode . ansible-doc-mode)
    :config
    (when (featurep 'evil)
      (evil-set-initial-state '(ansible-doc-module-mode) 'emacs)))
#+end_src
*** footer                                                        :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-ansible)
  ;;; config-ansible.el ends here
#+end_src
** Perl
:PROPERTIES:
:header-args: :tangle ./modules/config-perl.el :mkdirp t
:END:
*** header                                                       :noexport:
#+begin_src emacs-lisp +n
  ;;; config-perl --- perl configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =cperl-mode=
#+begin_src emacs-lisp -n
  (use-package cperl-mode
    :ensure
    :mode ("\\.\\([pP][Llm]\\|al\\)\\'" . cperl-mode))
#+end_src
*** footer                                                       :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-perl)
  ;;; config-perl.el ends here
#+end_src
** Haskell
:PROPERTIES:
:header-args: :tangle ./modules/config-haskell.el :mkdirp t
:END:
*** header                                                       :noexport:
#+begin_src emacs-lisp +n
  ;;; config-haskell --- haskell configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src
*** =haskell-mode=
#+begin_src emacs-lisp -n
  (use-package haskell-mode
    :ensure t
    :init
    (setq flymake-allowed-file-name-masks nil)
    :custom
    (haskell-process-load-or-reload-prompt t)
    (haskell-process-auto-import-loaded-modules t)
    (haskell-process-log t)
    (haskell-tags-on-save t))

  (use-package lsp-haskell
    :ensure t)
#+end_src
*** footer                                                       :noexport:
#+begin_src emacs-lisp -n
  (provide 'config-haskell)
  ;;; config-haskell.el ends here
#+end_src
* Footnotes

[fn:17] https://github.com/emacs-dashboard/emacs-dashboard
[fn:16] https://github.com/seagle0128/doom-modeline

[fn:15] https://github.com/doomemacs/themes
[fn:14] https://github.com/domtronn/all-the-icons.el

[fn:13] https://github.com/justbur/emacs-which-key
[fn:12] https://github.com/noctuid/general.el

[fn:11] https://github.com/hlissner/evil-multiedit
[fn:10] https://github.com/ninrod/exato

[fn:9] https://github.com/bling/evil-visualstar
[fn:8] https://github.com/mamapanda/evil-traces

[fn:7] https://github.com/cute-jumper/evil-embrace.el
[fn:6] https://github.com/emacs-evil/evil-surround

[fn:5] https://github.com/PythonNut/evil-easymotion
[fn:4] https://github.com/wcsmith/evil-args

[fn:3] https://github.com/7696122/evil-terminal-cursor-changer
[fn:2] https://github.com/emacs-evil/evil-collection

[fn:1] https://evil.readthedocs.io/en/latest/overview.html#installation-via-package-el
